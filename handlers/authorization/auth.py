from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ContextTypes, ConversationHandler, CommandHandler, MessageHandler, filters
from services.api_client import login_user
from decouple import config

ENTER_ROLE, AUTH_COMPLETE = range(2)


CLIENT_NAME = config("CLIENT_NAME")
CLIENT_PASSWORD = config("CLIENT_PASSWORD")



async def start_auth(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ—á–∞—Ç–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó."""

    tg_id = update.effective_user.id
    context.user_data["tg_id"] = tg_id


    keyboard = [
        [KeyboardButton("–ë–µ–Ω–µ—Ñ—ñ—Ü—ñ–∞—Ä"), KeyboardButton("–í–æ–ª–æ–Ω—Ç–µ—Ä")],
        [KeyboardButton("–°–∫–∞—Å—É–≤–∞—Ç–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    await update.message.reply_text(
        "–í–∏–±–µ—Ä—ñ—Ç—å –≤–∞—à—É —Ä–æ–ª—å:", reply_markup=reply_markup
    )
    return ENTER_ROLE


async def enter_role(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–æ–ª—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó."""
    role_text = update.message.text.lower()
    if role_text == "–±–µ–Ω–µ—Ñ—ñ—Ü—ñ–∞—Ä":
        context.user_data["role_id"] = 1
    elif role_text == "–≤–æ–ª–æ–Ω—Ç–µ—Ä":
        context.user_data["role_id"] = 2
    else:
        await update.message.reply_text("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –≤–∏–±—ñ—Ä —Ä–æ–ª—ñ. –û–±–µ—Ä—ñ—Ç—å –æ–¥–Ω—É –∑ –æ–ø—Ü—ñ–π:")
        return ENTER_ROLE


    login_request = {
        "tg_id": str(context.user_data["tg_id"]),
        "role_id": context.user_data["role_id"],
        "client": CLIENT_NAME,
        "password": CLIENT_PASSWORD,
    }

    try:

        response = await login_user(login_request)
        access_token = response["access_token"]
        refresh_token = response["refresh_token"]


        context.user_data["access_token"] = access_token
        context.user_data["refresh_token"] = refresh_token

        await update.message.reply_text("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞! üéâ –í–∏ —Ç–µ–ø–µ—Ä –º–æ–∂–µ—Ç–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –±–æ—Ç–æ–º.")


        await main_menu(update, context)

        return ConversationHandler.END
    except ValueError as e:
        await update.message.reply_text(f"–ü–æ–º–∏–ª–∫–∞ –¥–∞–Ω–∏—Ö: {str(e)}. –£—Ç–æ—á–Ω—ñ—Ç—å –≤–∞—à—ñ –¥–∞–Ω—ñ –π —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
                                        reply_markup=ReplyKeyboardMarkup(
                                            keyboard=[[KeyboardButton("–°—Ç–∞—Ç–∏ –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–º"), KeyboardButton("–°—Ç–∞—Ç–∏ –±–µ–Ω–µ—Ñ—ñ—Ü—ñ–∞—Ä–æ–º")]],
                                            resize_keyboard=True, one_time_keyboard=False
                                        ))
        return ConversationHandler.END
    except PermissionError as e:
        await update.message.reply_text(f"–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ: {str(e)}. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ —Å–ª—É–∂–±–∏ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏.",
                                        reply_markup=ReplyKeyboardMarkup(
                                            keyboard=[
                                                [KeyboardButton("–°—Ç–∞—Ç–∏ –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–º"), KeyboardButton("–°—Ç–∞—Ç–∏ –±–µ–Ω–µ—Ñ—ñ—Ü—ñ–∞—Ä–æ–º")]],
                                            resize_keyboard=True, one_time_keyboard=False
                                        ))

        return ConversationHandler.END
    except Exception as e:
        print(f"Unexpected error: {str(e)}")
        await update.message.reply_text(f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: {str(e)}. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
                                        reply_markup=ReplyKeyboardMarkup(
                                            keyboard=[
                                                [KeyboardButton("–°—Ç–∞—Ç–∏ –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–º"), KeyboardButton("–°—Ç–∞—Ç–∏ –±–µ–Ω–µ—Ñ—ñ—Ü—ñ–∞—Ä–æ–º")]],
                                            resize_keyboard=True, one_time_keyboard=False
                                        ))

        return ConversationHandler.END

async def cancel_auth(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–∫–∞—Å—É–≤–∞–Ω–Ω—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó."""
    keyboard = [[KeyboardButton("–°—Ç–∞—Ç–∏ –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–º"), KeyboardButton("–°—Ç–∞—Ç–∏ –±–µ–Ω–µ—Ñ—ñ—Ü—ñ–∞—Ä–æ–º")]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)
    await update.message.reply_text("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.",
                                    reply_markup=reply_markup)
    return ConversationHandler.END

auth_handler = ConversationHandler(
    entry_points=[MessageHandler(filters.Regex("^–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è$"), start_auth)],
    states={
        ENTER_ROLE: [MessageHandler(filters.TEXT & ~filters.COMMAND & ~filters.Regex("^–°–∫–∞—Å—É–≤–∞—Ç–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é$"), enter_role)],
    },
    fallbacks=[MessageHandler(filters.Regex("^–°–∫–∞—Å—É–≤–∞—Ç–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é$"), cancel_auth)],
)

async def main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø—ñ—Å–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó."""
    role_id = context.user_data.get("role_id")

    if role_id == 2:
        keyboard = [
            [KeyboardButton("–°–ø–∏—Å–æ–∫ –∑–∞–≤–¥–∞–Ω—å")],
            [KeyboardButton("–ü—Ä–∏–π–Ω—è—Ç–∏ –∑–∞—è–≤–∫—É –≤ –æ–±—Ä–æ–±–∫—É")],
            [KeyboardButton("–ó–∞–∫—Ä–∏—Ç–∏ –∑–∞—è–≤–∫—É")],
            [KeyboardButton("–°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞—è–≤–∫—É")],
            [KeyboardButton("–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å")],
            [KeyboardButton("–î–µ–∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å –≤–æ–ª–æ–Ω—Ç–µ—Ä–∞")],
            [KeyboardButton("–í–∏—Ö—ñ–¥")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
        await update.message.reply_text("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –¥–ª—è –≤–æ–ª–æ–Ω—Ç–µ—Ä–∞:", reply_markup=reply_markup)

    elif role_id == 1:
        keyboard = [
            [KeyboardButton("–î–µ–∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å –±–µ–Ω–µ—Ñ—ñ—Ü—ñ–∞—Ä–∞")],
            [KeyboardButton("–ü–æ–¥–∞—Ç–∏ –∑–∞—è–≤–∫—É")],
            [KeyboardButton("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∑–∞—è–≤–∫—É")],
            [KeyboardButton("–î–µ–∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –∑–∞—è–≤–∫—É")],
            [KeyboardButton("–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –º–æ—ó –∑–∞—è–≤–∫–∏")],
            [KeyboardButton("–í–∏—Ö—ñ–¥")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
        await update.message.reply_text("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –¥–ª—è –±–µ–Ω–µ—Ñ—ñ—Ü—ñ–∞—Ä–∞:", reply_markup=reply_markup)


async def handle_exit(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ '–í–∏–π—Ç–∏'. –ü–æ–≤–µ—Ä—Ç–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó —Ç–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó."""

    context.user_data.clear()


    keyboard = [
        [KeyboardButton("–°—Ç–∞—Ç–∏ –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–º"), KeyboardButton("–°—Ç–∞—Ç–∏ –±–µ–Ω–µ—Ñ—ñ—Ü—ñ–∞—Ä–æ–º")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)


    await update.message.reply_text("–í–∏ –≤–∏–π—à–ª–∏ –∑ –æ–±–ª—ñ–∫–æ–≤–æ–≥–æ –∑–∞–ø–∏—Å—É. –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:", reply_markup=reply_markup)



