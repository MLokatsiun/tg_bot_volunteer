import re
from datetime import datetime

from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton, \
    ReplyKeyboardRemove
from telegram.ext import ContextTypes, ConversationHandler, CommandHandler, MessageHandler, CallbackQueryHandler, \
    filters
from urllib3 import request

from handlers.beneficiary.create_application import reverse_geocode, ensure_valid_token
from services.api_client import register_user, login_user, get_applications_by_status, accept_application

AWAIT_CONFIRMATION, AWAIT_AUTHORIZATION, ENTER_PHONE, ENTER_FIRSTNAME, ENTER_LASTNAME, ENTER_PATRONYMIC, CHOOSE_DEVICE, ENTER_LOCATION, SELECT_APPLICATION, CONFIRM_APPLICATION, CONFIRM_DATA, CONFIRM_OR_EDIT = range(
    12)

from decouple import config

CLIENT_NAME = config("CLIENT_NAME")
CLIENT_PASSWORD = config("CLIENT_PASSWORD")


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    deep_link_data = context.args

    if deep_link_data:
        param = deep_link_data[0]

        if param == "volunteer":
            return await start_volunteer_registration(update, context)

        elif param.startswith("app_"):
            application_id = param.removeprefix("app_")
            context.user_data["pending_application_id"] = application_id
            return await start_application_flow(update, context, application_id)

        elif param == "beneficiary":
            return await start_beneficiary_registration(update, context)

    keyboard = [
        [KeyboardButton("–°—Ç–∞—Ç–∏ –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–º"), KeyboardButton("–°—Ç–∞—Ç–∏ –±–µ–Ω–µ—Ñ—ñ—Ü—ñ–∞—Ä–æ–º")],
        [KeyboardButton("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "üéâ –í—ñ—Ç–∞—î–º–æ!üëã –û–±–µ—Ä—ñ—Ç—å –æ–¥–Ω—É –∑ –æ–ø—Ü—ñ–π –Ω–∏–∂—á–µ, —â–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏.",
        reply_markup=reply_markup
    )

    return ConversationHandler.END


from datetime import datetime
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackQueryHandler

async def process_application(update: Update, context: ContextTypes.DEFAULT_TYPE, application_id: str) -> int:
    """
    –õ–æ–≥—ñ–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∑–∞—è–≤–∫–∏ –∑–∞ —ó—ó ID.
    –ü–µ—Ä–µ–≤—ñ—Ä—è—î –≤–∞–ª—ñ–¥–Ω—ñ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ –¥–æ—Å—Ç—É–ø—É, –æ—Ç—Ä–∏–º—É—î –∑–∞—è–≤–∫—É —á–µ—Ä–µ–∑ API,
    —ñ –Ω–∞–¥—Å–∏–ª–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.
    """
    try:
        access_token = await ensure_valid_token(context)

        applications = await get_applications_by_status(access_token, status="available")

        application_data = next((app for app in applications if str(app['id']) == application_id), None)

        if not application_data:
            await update.message.reply_text(
                "‚ùå –ó–∞—è–≤–∫–∞ –∑ —Ç–∞–∫–∏–º ID –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –∞–±–æ –Ω–µ –≤ –¥–æ—Å—Ç—É–ø–Ω–æ–º—É —Å—Ç–∞—Ç—É—Å—ñ –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.",
                parse_mode="Markdown"
            )
            await main_menu(update, context)
            return ConversationHandler.END

        confirmation_text = (
            f"‚úÖ –í–∏ –≤–∏–±—Ä–∞–ª–∏ –∑–∞—è–≤–∫—É –∑ ID: {application_data['id']}\n"
            f"üìù –û–ø–∏—Å: {application_data['description']}\n"
            f"üìç –ó–∞ {application_data['distance']} –∫–º. –≤—ñ–¥ –≤–∞—Å\n\n"
            f"‚ùì –í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ –≤–∏–∫–æ–Ω–∞—î—Ç–µ —ó—ó?"
        )

        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –¢–∞–∫", callback_data="confirm_yes"),
                InlineKeyboardButton("‚ùå –ù—ñ", callback_data="confirm_no"),
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        confirmation_message = await update.message.reply_text(
            confirmation_text,
            parse_mode="Markdown",
            disable_web_page_preview=True,
            reply_markup=reply_markup
        )

        async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
            query = update.callback_query
            await query.answer()

            if query.data == "confirm_yes":

                try:
                    application_data = await accept_application(access_token, int(application_id))

                    local_application_data = next(
                        (app for app in context.user_data["applications_list"] if str(app["id"]) == application_id), {})

                    creator_name = (
                            application_data.get("creator", {}).get("first_name")
                            or local_application_data.get("creator", {}).get("first_name", "–Ü–º'—è –Ω–µ –≤–∫–∞–∑–∞–Ω–æ")
                    )
                    creator_phone = (
                            application_data.get("creator", {}).get("phone_num")
                            or local_application_data.get("creator", {}).get("phone_num", "–¢–µ–ª–µ—Ñ–æ–Ω –Ω–µ –≤–∫–∞–∑–∞–Ω–æ")
                    )

                    location = application_data.get("location", {})
                    latitude = location.get("latitude", "–ù–µ –≤–∫–∞–∑–∞–Ω–æ")
                    longitude = location.get("longitude", "–ù–µ –≤–∫–∞–∑–∞–Ω–æ")
                    address = location.get("address_name", "–ê–¥—Ä–µ—Å–∞ –Ω–µ –≤–∫–∞–∑–∞–Ω–∞")

                    google_maps_url = f"[üåç —Ç—É—Ç](https://www.google.com/maps?q={latitude},{longitude})" if latitude != "–ù–µ –≤–∫–∞–∑–∞–Ω–æ" and longitude != "–ù–µ –≤–∫–∞–∑–∞–Ω–æ" else "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"

                    location_text = (
                        f"üìç –õ–æ–∫–∞—Ü—ñ—è: {google_maps_url}\n"
                        f"üè† –ê–¥—Ä–µ—Å–∞: {address}\n\n"
                        if google_maps_url != "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"
                        else "üìç –õ–æ–∫–∞—Ü—ñ—è: –Ω–µ –≤–∫–∞–∑–∞–Ω–∞\nüè† –ê–¥—Ä–µ—Å–∞: –Ω–µ –≤–∫–∞–∑–∞–Ω–∞"
                    )

                    def format_date(date_str):
                        if date_str:
                            try:
                                date_obj = datetime.fromisoformat(date_str)
                                return date_obj.strftime("%d.%m.%Y %H:%M")
                            except ValueError:
                                return "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏"
                        return "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"

                    date_at_formatted = format_date(application_data.get("date_at"))
                    active_to_formatted = format_date(application_data.get("active_to"))

                    confirmation_text = (
                        f"‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø—ñ—à–Ω–æ –ø—Ä–∏–π–Ω—è—Ç–∞!\n"
                        f"üÜî ID: {application_data['id']}\n"
                        f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {application_data['category_id']}\n"
                        f"üìù –û–ø–∏—Å: {application_data['description']}\n"
                        f"üìÖ –î–∞—Ç–∞ –ø–æ–¥–∞—á—ñ: {date_at_formatted}\n"
                        f"‚è≥ –ê–∫—Ç–∏–≤–Ω–∞ –¥–æ: {active_to_formatted}\n"
                        f"üîÑ –°—Ç–∞—Ç—É—Å: –í–∏–∫–æ–Ω—É—î—Ç—å—Å—è\n\n"
                        f"üë§ –Ü–º'—è –∑–∞–º–æ–≤–Ω–∏–∫–∞: {creator_name}\n"
                        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω –∑–∞–º–æ–≤–Ω–∏–∫–∞: {creator_phone}\n\n"
                        f"{location_text}"
                    )

                    next_keyboard = [
                        [KeyboardButton("–°–ø–∏—Å–æ–∫ –∑–∞–≤–¥–∞–Ω—å")],
                        [KeyboardButton("–ü—Ä–∏–π–Ω—è—Ç–∏ –∑–∞—è–≤–∫—É –≤ –æ–±—Ä–æ–±–∫—É")],
                        [KeyboardButton("–ó–∞–∫—Ä–∏—Ç–∏ –∑–∞—è–≤–∫—É")],
                        [KeyboardButton("–°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞—è–≤–∫—É")],
                        [KeyboardButton("–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å")],
                        [KeyboardButton("–î–µ–∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å –≤–æ–ª–æ–Ω—Ç–µ—Ä–∞")],
                        [KeyboardButton("–í–∏—Ö—ñ–¥")],
                    ]
                    reply_markup = ReplyKeyboardMarkup(next_keyboard, resize_keyboard=True)

                    await query.edit_message_text(
                        confirmation_text,
                        parse_mode="Markdown",
                        disable_web_page_preview=True,
                    )

                    await query.message.reply_text(
                        "–û–±–µ—Ä—ñ—Ç—å –Ω–∞—Å—Ç—É–ø–Ω—É –¥—ñ—é –∑ –º–µ–Ω—é:",
                        reply_markup=reply_markup,
                    )

                except Exception as e:
                    await query.edit_message_text(
                        text=f"‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—ñ –∑–∞—è–≤–∫–∏: {str(e)}",
                        parse_mode="Markdown",
                    )
                    await main_menu(update, context)

            elif query.data == "confirm_no":
                next_keyboard = [
                    [KeyboardButton("–°–ø–∏—Å–æ–∫ –∑–∞–≤–¥–∞–Ω—å")],
                    [KeyboardButton("–ü—Ä–∏–π–Ω—è—Ç–∏ –∑–∞—è–≤–∫—É –≤ –æ–±—Ä–æ–±–∫—É")],
                    [KeyboardButton("–ó–∞–∫—Ä–∏—Ç–∏ –∑–∞—è–≤–∫—É")],
                    [KeyboardButton("–°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞—è–≤–∫—É")],
                    [KeyboardButton("–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å")],
                    [KeyboardButton("–î–µ–∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å –≤–æ–ª–æ–Ω—Ç–µ—Ä–∞")],
                    [KeyboardButton("–í–∏—Ö—ñ–¥")]
                ]
                reply_markup = ReplyKeyboardMarkup(next_keyboard, resize_keyboard=True)

                await query.edit_message_text(
                    text="–ó–∞—è–≤–∫–∞ –Ω–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞. –û–±–µ—Ä—ñ—Ç—å –Ω–∞—Å—Ç—É–ø–Ω—É –¥—ñ—é:",
                    parse_mode="Markdown"
                )

                effective_message = update.effective_message
                if effective_message:
                    await effective_message.reply_text(
                        text="–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:",
                        reply_markup=reply_markup
                    )

            context.user_data.pop("pending_application_id", None)

        context.application.add_handler(CallbackQueryHandler(button))

    except Exception as e:
        effective_message = update.effective_message
        if effective_message:
            await effective_message.reply_text(
                f"‚ùå *–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–∞—è–≤–∫–∏:*\n\n{str(e)}",
                parse_mode="Markdown"
            )
        await main_menu(update, context)

    context.user_data.pop("pending_application_id", None)
    return ConversationHandler.END



async def cancel_application(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Handles the cancellation of the application acceptance process."""
    query = update.callback_query
    await query.answer()

    await query.edit_message_text("–í–∏ —Å–∫–∞—Å—É–≤–∞–ª–∏ –ø—Ä–∏–π–Ω—è—Ç—Ç—è –∑–∞—è–≤–∫–∏.")
    return ConversationHandler.END

async def start_volunteer_registration(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —É–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π, –ø–µ—Ä–µ–¥ –ø–æ—á–∞—Ç–∫–æ–º –ø—Ä–æ—Ü–µ—Å—É —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –¥–ª—è –≤–æ–ª–æ–Ω—Ç–µ—Ä–∞."""
    context.user_data["role_id"] = 2
    return await check_and_start_registration(update, context)


async def start_beneficiary_registration(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —É–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π, –ø–µ—Ä–µ–¥ –ø–æ—á–∞—Ç–∫–æ–º –ø—Ä–æ—Ü–µ—Å—É —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –¥–ª—è –±–µ–Ω–µ—Ñ—ñ—Ü—ñ–∞—Ä–∞."""
    context.user_data["role_id"] = 1
    return await check_and_start_registration(update, context)


async def check_and_start_registration(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:

    tg_id = update.effective_user.id
    role_id = context.user_data.get("role_id")

    application_id = context.user_data.get("pending_application_id")

    if update.message.text and "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏" in update.message.text:
        return await cancel(update, context)

    login_request = {
        "tg_id": str(tg_id),
        "role_id": role_id,
        "client": CLIENT_NAME,
        "password": CLIENT_PASSWORD,
    }

    try:
        access_token = context.user_data.get("access_token")
        refresh_token = context.user_data.get("refresh_token")

        if access_token and refresh_token:

            if role_id == 2 and application_id:
                return await process_application(update, context, application_id)

            await update.message.reply_text(
                "üéâ –í–∏ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ! –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é üè†"
            )
            await main_menu(update, context)
            return ConversationHandler.END

        response = await login_user(login_request)

        access_token = response.get("access_token")
        refresh_token = response.get("refresh_token")

        if access_token and refresh_token:
            context.user_data["access_token"] = access_token
            context.user_data["refresh_token"] = refresh_token

            if role_id == 2 and application_id:
                return await process_application(update, context, application_id)

            await update.message.reply_text(
                "üéâ –í–∏ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ! –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é üè†"
            )
            await main_menu(update, context)
            return ConversationHandler.END

        if response.get("is_active") is False:

            context.user_data.update(response)

            firstname = response.get("firstname", "–ù–µ –≤–∫–∞–∑–∞–Ω–æ")
            lastname = response.get("lastname", "")
            patronymic = response.get("patronymic", "")
            phone = response.get("phone_num", "–ù–µ –≤–∫–∞–∑–∞–Ω–æ")
            role = "–í–æ–ª–æ–Ω—Ç–µ—Ä" if role_id == 2 else "–ë–µ–Ω–µ—Ñ—ñ—Ü—ñ–∞—Ä"
            location_text = ""

            if role_id == 2:
                location_display = response.get("location", {})
                latitude = location_display.get("latitude")
                longitude = location_display.get("longitude")
                address = location_display.get("address", "–ê–¥—Ä–µ—Å–∞ –Ω–µ –≤–∫–∞–∑–∞–Ω–∞")
                google_maps_url = (

                    f"[üåç —Ç—É—Ç](https://www.google.com/maps?q={latitude},{longitude})"

                    if latitude and longitude
                    else "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"
                )
                location_text = (
                    f"üìç –õ–æ–∫–∞—Ü—ñ—è: {google_maps_url}\nüè† –ê–¥—Ä–µ—Å–∞: {address}\n\n"
                    if latitude and longitude
                    else "üìç –õ–æ–∫–∞—Ü—ñ—è: –Ω–µ –≤–∫–∞–∑–∞–Ω–∞\nüè† –ê–¥—Ä–µ—Å–∞: –Ω–µ –≤–∫–∞–∑–∞–Ω–∞\n\n"

                )

            confirmation_message = "–î–∞–Ω—ñ, –æ—Ç—Ä–∏–º–∞–Ω—ñ –∑ –±–∞–∑–∏:\n\n"

            if firstname != "–ù–µ –≤–∫–∞–∑–∞–Ω–æ":
                confirmation_message += f"üë§ –Ü–º'—è: {firstname}\n"
            if lastname:
                confirmation_message += f"üë§ –ü—Ä—ñ–∑–≤–∏—â–µ: {lastname}\n"
            if patronymic:
                confirmation_message += f"üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –ü–æ-–±–∞—Ç—å–∫–æ–≤—ñ: {patronymic}\n"
            confirmation_message += f"üé≠ –†–æ–ª—å: {role}\n"

            if role_id == 2:

                confirmation_message += location_text

            confirmation_message += f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n\n"

            confirmation_message += "–Ø–∫—â–æ –¥–∞–Ω—ñ –≤—ñ—Ä–Ω—ñ, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏'. –Ø–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–Ω–µ—Å—Ç–∏ –∑–º—ñ–Ω–∏, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏'."

            keyboard = [
                [KeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏")],
                [KeyboardButton("‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏")],
                [KeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏")],
            ]

            reply_markup = ReplyKeyboardMarkup(

                keyboard, resize_keyboard=True, one_time_keyboard=True
            )
            await update.message.reply_text(
                confirmation_message,
                parse_mode="Markdown",
                disable_web_page_preview=True,
                reply_markup=reply_markup,
            )
            return CONFIRM_OR_EDIT


    except PermissionError:
        keyboard = [
            [KeyboardButton("üîç –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –≤–æ–ª–æ–Ω—Ç–µ—Ä–∞")],
            [KeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏")]
        ] if role_id == 2 else [
            [KeyboardButton("üîç –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –±–µ–Ω–µ—Ñ—ñ—Ü—ñ–∞—Ä–∞")],
            [KeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
        await update.message.reply_text(
            "‚ùó –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∞–±–æ –¥–æ—á–µ–∫–∞–π—Ç–µ—Å—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞.",
            reply_markup=reply_markup
        )
        return AWAIT_CONFIRMATION

    except Exception:
        return await start_registration(update, context)


async def start_application_flow(update: Update, context: ContextTypes.DEFAULT_TYPE, application_id: str) -> int:
    """
    –ü–æ—á–∞—Ç–∫–æ–≤–∏–π –ø—Ä–æ—Ü–µ—Å –∑–∞—è–≤–∫–∏:
    1. –ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ —î —Ç–æ–∫–µ–Ω–∏.
    2. –Ø–∫—â–æ —Ç–æ–∫–µ–Ω–∏ —î, –æ–¥—Ä–∞–∑—É –æ–±—Ä–æ–±–ª—è—î –∑–∞—è–≤–∫—É.
    3. –Ø–∫—â–æ —Ç–æ–∫–µ–Ω—ñ–≤ –Ω–µ–º–∞—î, –ø—Ä–æ–ø–æ–Ω—É—î –∞–≤—Ç–æ—Ä–∏–∑—É–≤–∞—Ç–∏—Å—è —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É "–í–∏–∫–æ–Ω–∞—Ç–∏ –∑–∞—è–≤–∫—É".
    """
    tg_id = update.effective_user.id
    role_id = context.user_data.get("role_id")
    access_token = context.user_data.get("access_token")

    if access_token:
        if role_id == 2:
            context.user_data.pop("pending_application_id", None)
            try:
                result = await process_application(update, context, application_id)

                return result

            except Exception as e:
                await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–∞—è–≤–∫–∏: {str(e)}")
                await main_menu(update, context)
                return ConversationHandler.END
        else:
            await update.message.reply_text("‚ùå –¶—è –¥—ñ—è –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏—à–µ –¥–ª—è –≤–æ–ª–æ–Ω—Ç–µ—Ä—ñ–≤.")
            return ConversationHandler.END

    context.user_data["pending_application_id"] = application_id
    await update.message.reply_text(
        "üîí –í–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ. –©–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –æ–±—Ä–æ–±–∫—É –∑–∞—è–≤–∫–∏, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É '–í–∏–∫–æ–Ω–∞—Ç–∏ –∑–∞—è–≤–∫—É'."
    )

    keyboard = [
        [KeyboardButton("üü¢ –í–∏–∫–æ–Ω–∞—Ç–∏ –∑–∞—è–≤–∫—É")],
        [KeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    await update.message.reply_text("–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=reply_markup)

    return AWAIT_AUTHORIZATION


async def handle_execute_request(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–æ–±–ª—è—î –∑–∞–ø–∏—Ç, –∫–æ–ª–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞—Ç–∏—Å–∫–∞—î "–í–∏–∫–æ–Ω–∞—Ç–∏ –∑–∞—è–≤–∫—É".
    –í–∏–∫–ª–∏–∫–∞—î —Ñ—É–Ω–∫—Ü—ñ—é `check_and_start_registration` –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó/—Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó.
    """
    if update.message.text == "üü¢ –í–∏–∫–æ–Ω–∞—Ç–∏ –∑–∞—è–≤–∫—É":
        application_id = context.user_data.get("pending_application_id")
        if application_id:
            return await start_volunteer_registration(update, context)
        else:
            await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–µ–º–∞—î –∑–∞—è–≤–∫–∏ –¥–ª—è –æ–±—Ä–æ–±–∫–∏.")
            return await start_volunteer_registration(update, context)

    elif update.message.text == "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏":
        await update.message.reply_text("‚ùå –î—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
        return ConversationHandler.END

    await update.message.reply_text("‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –¥—ñ—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
    return AWAIT_AUTHORIZATION



async def handle_confirm_or_edit(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–æ–±–∫–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∞–±–æ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."""
    user_data = context.user_data
    role_id = user_data.get("role_id")
    response_text = "‚úÖ –í–∞—à—ñ –¥–∞–Ω—ñ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ!"

    if "‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏" in update.message.text:
        try:
            await register_user(update.message.from_user.id, user_data)

            if role_id == 2:
                keyboard = [
                    [KeyboardButton("üîç –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –≤–æ–ª–æ–Ω—Ç–µ—Ä–∞")],
                    [KeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏")]
                ]
            else:
                keyboard = [
                    [KeyboardButton("üîç –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –±–µ–Ω–µ—Ñ—ñ—Ü—ñ–∞—Ä–∞")],
                    [KeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏")]
                ]

            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)


            await update.message.reply_text(
                f"{response_text} –í–∏ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –∞–±–æ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –º–µ–Ω—é.",
                reply_markup=reply_markup
            )
            return AWAIT_CONFIRMATION
        except Exception as e:
            await update.message.reply_text(
                f"‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—ñ: {str(e)}. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."
            )
            return CONFIRM_DATA

    elif "‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏" in update.message.text:
        return await start_registration(update, context)

    return await cancel(update, context)


async def start_registration(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ—á–∞—Ç–æ–∫ –ø—Ä–æ—Ü–µ—Å—É —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó."""
    keyboard = [
        [KeyboardButton("üì± –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É", request_contact=True)],
        [KeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    await update.message.reply_text(
        "üì≤ –î–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó, –±—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Å–≤—ñ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂—á–µ:",
        reply_markup=reply_markup
    )
    return ENTER_PHONE


async def enter_phone(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É –∞–±–æ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è."""
    if update.message.text == "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏":
        return await cancel(update, context)

    if update.message.contact:
        phone = update.message.contact.phone_number

        print("Contact data:", update.message.contact)
        if phone.startswith('+'):
            phone = phone[1:]
        elif phone.startswith('8'):
            phone = '380' + phone[1:]
        elif not phone.startswith('380'):
            await update.message.reply_text("‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è –∫–æ—Ä–µ–∫—Ç–Ω–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É.")
            return ENTER_PHONE

        print("Extracted phone number:", phone)
        context.user_data["phone_num"] = phone

        keyboard = [[KeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏")]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)

        await update.message.reply_text(
            "üìù –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Å–≤–æ—î –ø–æ–≤–Ω–µ —ñ–º'—è –≤ –æ–¥–Ω–æ–º—É —Ä—è–¥–∫—É, —Ä–æ–∑–¥—ñ–ª—è—é—á–∏ —á–∞—Å—Ç–∏–Ω–∏ –ø—Ä–æ–±—ñ–ª–∞–º–∏.\n\n"
            "üîπ –ù–∞–ø—Ä–∏–∫–ª–∞–¥:\n"
            "- –Ü–≤–∞–Ω –ü–µ—Ç—Ä–µ–Ω–∫–æ –Ü–≤–∞–Ω–æ–≤–∏—á (—ñ–º'—è, –ø—Ä—ñ–∑–≤–∏—â–µ, –ø–æ –±–∞—Ç—å–∫–æ–≤—ñ)\n"
            "- –Ü–≤–∞–Ω –ü–µ—Ç—Ä–µ–Ω–∫–æ (—Ç—ñ–ª—å–∫–∏ —ñ–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ)\n"
            "- –Ü–≤–∞–Ω (–ª–∏—à–µ —ñ–º'—è)\n\n"
            "–Ø–∫—â–æ –≤–∏ –≤–≤–µ–¥–µ—Ç–µ —Ç—ñ–ª—å–∫–∏ —ñ–º'—è, –±—É–¥–µ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –ª–∏—à–µ –π–æ–≥–æ.",
            reply_markup=reply_markup
        )

        print("Proceeding to ENTER_FIRSTNAME")
        return ENTER_FIRSTNAME
    else:
        print("No contact data provided.")
        await update.message.reply_text("‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ—é –¥–ª—è –ø–µ—Ä–µ–¥–∞—á—ñ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É.")
        return ENTER_PHONE


MAX_NAME_LENGTH = 50
MIN_NAME_LENGTH = 2


async def enter_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è —ñ–º–µ–Ω—ñ, –ø—Ä—ñ–∑–≤–∏—â–∞ —ñ –ø–æ-–±–∞—Ç—å–∫–æ–≤—ñ –æ–¥–Ω–∏–º —Ä—è–¥–∫–æ–º."""
    if update.message.text == "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏":
        return await cancel(update, context)

    user_input = update.message.text.strip()

    if len(user_input) > MAX_NAME_LENGTH:
        await update.message.reply_text(f"–¢–µ–∫—Å—Ç –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –¥–æ–≤–∂–∏–Ω–∞ ‚Äì {MAX_NAME_LENGTH} —Å–∏–º–≤–æ–ª—ñ–≤. ‚ùå")
        return ENTER_FIRSTNAME

    name_parts = user_input.split()

    if len(name_parts) == 1:
        context.user_data["firstname"] = name_parts[0]
        context.user_data["lastname"] = ""
        context.user_data["patronymic"] = ""
    elif len(name_parts) == 2:
        context.user_data["lastname"] = name_parts[0]
        context.user_data["firstname"] = name_parts[1]
        context.user_data["patronymic"] = ""
    elif len(name_parts) >= 3:
        context.user_data["lastname"] = name_parts[0]
        context.user_data["firstname"] = name_parts[1]
        context.user_data["patronymic"] = " ".join(name_parts[2:])

    if context.user_data.get("role_id") == 2:
        return await choose_device(update, context)
    else:
        return await confirm_registration(update, context)


async def choose_device(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–ø–∏—Ç—É—î, —á–∏ –ø—Ä–∞—Ü—é—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ —Ç–µ–ª–µ—Ñ–æ–Ω—É —á–∏ –ü–ö."""
    keyboard = [
        [KeyboardButton("üì± –Ø –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ")],
        [KeyboardButton("üíª –Ø –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é –ü–ö")],
        [KeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    await update.message.reply_text(
        "–í–∫–∞–∂—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, —á–∏ –ø—Ä–∞—Ü—é—î—Ç–µ –≤–∏ –∑ —Ç–µ–ª–µ—Ñ–æ–Ω—É —á–∏ –ü–ö: üñ•Ô∏èüì±",
        reply_markup=reply_markup
    )
    return ENTER_LOCATION


async def enter_coordinates(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∞–±–æ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–¥—Ä–µ—Å–∏ —á–µ—Ä–µ–∑ –∑–≤–æ—Ä–æ—Ç–Ω–µ –≥–µ–æ–∫–æ–¥—É–≤–∞–Ω–Ω—è."""
    if update.message.text:
        user_response = update.message.text.strip()

        if user_response == "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏":
            return await cancel(update, context)

        if user_response == "üì± –Ø –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ":
            keyboard = [
                [KeyboardButton("üìç –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –ª–æ–∫–∞—Ü—ñ—î—é", request_location=True)],
                [KeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏")]
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
            await update.message.reply_text(
        "üîî **–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –º–æ–±—ñ–ª—å–Ω–æ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É:**\n\n"
        "1. **–£–≤—ñ–º–∫–Ω—ñ—Ç—å –º—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è:**\n"
        "   - –î–ª—è **Android**: –ü–µ—Ä–µ–π–¥—ñ—Ç—å –¥–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å ‚Üí \"–ú—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è\" —ñ —É–≤—ñ–º–∫–Ω—ñ—Ç—å –π–æ–≥–æ.\n"
        "   - –î–ª—è **iPhone**: –ü–µ—Ä–µ–π–¥—ñ—Ç—å –¥–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å ‚Üí \"–ö–æ–Ω—Ñ—ñ–¥–µ–Ω—Ü—ñ–π–Ω—ñ—Å—Ç—å\" ‚Üí \"–ú—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è\" —ñ —É–≤—ñ–º–∫–Ω—ñ—Ç—å –π–æ–≥–æ.\n\n"
        "   - –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É \"üìç –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –ª–æ–∫–∞—Ü—ñ—î—é\".\n"
        "2. **–Ø–∫—â–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –≤–∏–±—Ä–∞—Ç–∏ —ñ–Ω—à—É —Ç–æ—á–∫—É –Ω–∞ –∫–∞—Ä—Ç—ñ:**\n"
        "   - **–í–∏–º–∫–Ω—ñ—Ç—å –º—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è** –≤ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è—Ö —Ç–µ–ª–µ—Ñ–æ–Ω—É.\n"
        "   - –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É \"üìç –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –ª–æ–∫–∞—Ü—ñ—î—é\".\n"
        "   - –ó'—è–≤–∏—Ç—å—Å—è –≤—ñ–∫–Ω–æ –∑ –∫–∞—Ä—Ç–æ—é, –¥–µ –≤–∏ –∑–º–æ–∂–µ—Ç–µ –≤—Ä—É—á–Ω—É –≤–∏–±—Ä–∞—Ç–∏ —Ç–æ—á–∫—É –∞–±–æ –ø–µ—Ä–µ–º—ñ—Å—Ç–∏—Ç–∏ –º–∞—Ä–∫–µ—Ä –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–µ –º—ñ—Å—Ü–µ.\n"
        "   - –ü—ñ—Å–ª—è –≤–∏–±–æ—Ä—É –ø–æ—Ç—Ä—ñ–±–Ω–æ—ó —Ç–æ—á–∫–∏, –ø—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –ª–æ–∫–∞—Ü—ñ—é —ñ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —ó—ó.",
                reply_markup=reply_markup, parse_mode="Markdown"
            )
            return ENTER_LOCATION

        elif user_response == "üíª –Ø –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é –ü–ö":
            keyboard = [
                [KeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏")]
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
            await update.message.reply_text(
                "üíª **–Ø–∫ –∑–Ω–∞–π—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é Google Maps –Ω–∞ –ü–ö:**\n\n"
                "1Ô∏è‚É£ –í—ñ–¥–∫—Ä–∏–π—Ç–µ [Google Maps](https://www.google.com/maps) —É –≤–∞—à–æ–º—É –±—Ä–∞—É–∑–µ—Ä—ñ.\n"
                "2Ô∏è‚É£ –ó–Ω–∞–π–¥—ñ—Ç—å —Å–≤–æ—î –º—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –Ω–∞ –∫–∞—Ä—Ç—ñ, –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ –Ω–∞ –ø–æ—Ç—Ä—ñ–±–Ω—É —Ç–æ—á–∫—É –ª—ñ–≤–æ—é –∫–Ω–æ–ø–∫–æ—é –º–∏—à—ñ (–õ–ö–ú).\n"
                "3Ô∏è‚É£ –ù–∞–≤–µ–¥—ñ—Ç—å –∫—É—Ä—Å–æ—Ä –Ω–∞ –∫—Ä–∞–ø–∫—É, —è–∫–∞ –∑'—è–≤–∏–ª–∞—Å—è –Ω–∞ –∫–∞—Ä—Ç—ñ (–≤–∞—à–µ –º—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è) —Ç–∞ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –ø—Ä–∞–≤—É –∫–Ω–æ–ø–∫—É –º–∏—à—ñ (–ü–ö–ú).\n"
                "4Ô∏è‚É£ –£ –º–µ–Ω—é, —â–æ –∑'—è–≤–∏—Ç—å—Å—è, –∫–ª–∞—Ü–Ω—ñ—Ç—å –Ω–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –ª—ñ–≤–æ—é –∫–Ω–æ–ø–∫–æ—é –º–∏—à—ñ (–õ–ö–ú).\n"
                "5Ô∏è‚É£ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ (—à–∏—Ä–æ—Ç–∞ —Ç–∞ –¥–æ–≤–≥–æ—Ç–∞) –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Å–∫–æ–ø—ñ—é—é—Ç—å—Å—è –≤ –±—É—Ñ–µ—Ä –æ–±–º—ñ–Ω—É.\n"
                "6Ô∏è‚É£ –ü–æ–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ —Ü—å–æ–≥–æ —á–∞—Ç—É —ñ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –ø—Ä–∞–≤—É –∫–Ω–æ–ø–∫—É –º–∏—à—ñ (–ü–ö–ú) —É —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É –ø–æ–ª—ñ —á–∞—Ç—É, –∞ –ø–æ—Ç—ñ–º –≤–∏–±–µ—Ä—ñ—Ç—å **'–í—Å—Ç–∞–≤–∏—Ç–∏'**.\n"
                "   –¢–∞–∫–æ–∂ –º–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—é –∫–ª–∞–≤—ñ—à **Ctrl + V** –¥–ª—è –≤—Å—Ç–∞–≤–ª–µ–Ω–Ω—è.\n\n"
                "üìç **–ü—Ä–∏–∫–ª–∞–¥ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç:** `49.2827, -123.1216`", parse_mode="Markdown", reply_markup=reply_markup
            )
            return ENTER_LOCATION

        coordinates_match = re.match(r"^(-?\d+(\.\d+)?),\s*(-?\d+(\.\d+)?)$", user_response)
        if coordinates_match:
            latitude = float(coordinates_match.group(1))
            longitude = float(coordinates_match.group(3))
            context.user_data["location"] = {
                "latitude": latitude,
                "longitude": longitude
            }

            address = await reverse_geocode(latitude, longitude)
            context.user_data["location"]["address"] = address

            await update.message.reply_text(
                f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –æ—Ç—Ä–∏–º–∞–Ω–æ. –í–∏–∑–Ω–∞—á–µ–Ω–∞ –∞–¥—Ä–µ—Å–∞: {address}.\n"
                "–ë—É–¥—å –ª–∞—Å–∫–∞, –ø—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –≤–∞—à—ñ –¥–∞–Ω—ñ. ‚úÖ"
            )
            await confirm_registration(update, context)
            return CONFIRM_DATA


        else:
            context.user_data["location"] = {"address": user_response}
            await update.message.reply_text(
                "–ê–¥—Ä–µ—Å—É –æ—Ç—Ä–∏–º–∞–Ω–æ. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –≤–∞—à—ñ –¥–∞–Ω—ñ. ‚úÖ"
            )
            await confirm_registration(update, context)
            return CONFIRM_DATA

    elif update.message.location:
        latitude = update.message.location.latitude
        longitude = update.message.location.longitude
        context.user_data["location"] = {
            "latitude": latitude,
            "longitude": longitude
        }

        address = await reverse_geocode(latitude, longitude)
        context.user_data["location"]["address"] = address

        await update.message.reply_text(
            f"–õ–æ–∫–∞—Ü—ñ—é –æ—Ç—Ä–∏–º–∞–Ω–æ. –í–∏–∑–Ω–∞—á–µ–Ω–∞ –∞–¥—Ä–µ—Å–∞: {address}.\n"
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –ø—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –≤–∞—à—ñ –¥–∞–Ω—ñ. ‚úÖ"
        )
        await confirm_registration(update, context)
        return CONFIRM_DATA

    else:
        await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –≤–∞—à—É –ª–æ–∫–∞—Ü—ñ—é, –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –∞–±–æ –∞–¥—Ä–µ—Å—É. üìç")
        return ENTER_LOCATION


async def confirm_registration(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑—É—î –¥–∞–Ω—ñ –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –ø–µ—Ä–µ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è–º —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó."""
    user_data = context.user_data
    phone = user_data.get("phone_num", "–ù–µ –≤–∫–∞–∑–∞–Ω–æ")
    firstname = user_data.get("firstname", "–ù–µ –≤–∫–∞–∑–∞–Ω–æ")
    lastname = user_data.get("lastname", "–ù–µ –≤–∫–∞–∑–∞–Ω–æ")
    patronymic = user_data.get("patronymic", "–ù–µ –≤–∫–∞–∑–∞–Ω–æ")
    role = "–í–æ–ª–æ–Ω—Ç–µ—Ä" if user_data.get("role_id") == 2 else "–ë–µ–Ω–µ—Ñ—ñ—Ü—ñ–∞—Ä"

    location_display = "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"
    location = user_data.get("location", None)

    if location and "latitude" in location and "longitude" in location:
        location_display = f"–®–∏—Ä–æ—Ç–∞: {location['latitude']}, –î–æ–≤–≥–æ—Ç–∞: {location['longitude']}"
    elif location and "address" in location:
        location_display = f"–ê–¥—Ä–µ—Å–∞: {location['address']}"

    confirmation_message = (
        f"–í–∞—à—ñ –¥–∞–Ω—ñ –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è:\n\n"
        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
        f"üë§ –Ü–º'—è: {firstname}\n"
        f"üë• –ü—Ä—ñ–∑–≤–∏—â–µ: {lastname}\n"
        f"üìù –ü–æ-–±–∞—Ç—å–∫–æ–≤—ñ: {patronymic}\n"
        f"üé≠ –†–æ–ª—å: {role}\n"
        f"{'üåç –õ–æ–∫–∞—Ü—ñ—è: ' + location_display if role == '–í–æ–ª–æ–Ω—Ç–µ—Ä' else ''}\n\n"
        "–Ø–∫—â–æ –≤—Å–µ –≤—ñ—Ä–Ω–æ, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏'. –Ø–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–ø—Ä–∞–≤–∏—Ç–∏, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏'."
    )

    keyboard = [
        [KeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏")],
        [KeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)

    await update.message.reply_text(confirmation_message, reply_markup=reply_markup)
    return CONFIRM_DATA



async def send_to_api(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –¥–æ API –ø—ñ—Å–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Ç–∞ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –º–µ–Ω—é."""
    user_data = context.user_data
    user_id = update.message.from_user.id

    try:

        await register_user(user_id, user_data)
        role_id = user_data.get("role_id")

        if role_id == 2:
            keyboard = [
                [KeyboardButton("üîç –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –≤–æ–ª–æ–Ω—Ç–µ—Ä–∞")],
                [KeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏")]
            ]
        else:
            keyboard = [
                [KeyboardButton("üîç –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –±–µ–Ω–µ—Ñ—ñ—Ü—ñ–∞—Ä–∞")],
                [KeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏")]
            ]

        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)

        await update.message.reply_text(
            "‚úÖ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞! –í–∏ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –∞–±–æ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –º–µ–Ω—é.",
            reply_markup=reply_markup
        )

        return AWAIT_CONFIRMATION
    except PermissionError:

        keyboard = [
            [KeyboardButton("üîç –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –≤–æ–ª–æ–Ω—Ç–µ—Ä–∞")],
            [KeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏")]
        ] if user_data.get("role_id") == 2 else [
            [KeyboardButton("üîç –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –±–µ–Ω–µ—Ñ—ñ—Ü—ñ–∞—Ä–∞")],
            [KeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏")]
        ]


        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
        await update.message.reply_text(
            "–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∞–±–æ –¥–æ—á–µ–∫–∞–π—Ç–µ—Å—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞.",
            reply_markup=reply_markup
        )

        return AWAIT_CONFIRMATION
    except Exception as e:
        await update.message.reply_text(
            f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó: {str(e)}. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."
        )
        return CONFIRM_DATA


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–∫–∞—Å—É–≤–∞–Ω–Ω—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó —Ç–∞ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é."""

    if "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏" in update.message.text:

        await update.message.reply_text(
            "‚ùå –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.",
            reply_markup=ReplyKeyboardRemove()
        )

        keyboard = [[KeyboardButton("–°—Ç–∞—Ç–∏ –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–º"), KeyboardButton("–°—Ç–∞—Ç–∏ –±–µ–Ω–µ—Ñ—ñ—Ü—ñ–∞—Ä–æ–º")]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)

        await update.message.reply_text(
            "–í–∏–±–µ—Ä—ñ—Ç—å –æ–¥–Ω—É –∑ –æ–ø—Ü—ñ–π:",
            reply_markup=reply_markup
        )

        return ConversationHandler.END
    else:

        await update.message.reply_text(
            "–©–æ–± —Å–∫–∞—Å—É–≤–∞—Ç–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é, –Ω–∞–ø–∏—à—ñ—Ç—å –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–°–∫–∞—Å—É–≤–∞—Ç–∏'."
        )
        return AWAIT_CONFIRMATION


async def main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø—ñ—Å–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó."""
    role_id = context.user_data.get("role_id")

    if role_id == 2:
        keyboard = [
            [KeyboardButton("–°–ø–∏—Å–æ–∫ –∑–∞–≤–¥–∞–Ω—å")],
            [KeyboardButton("–ü—Ä–∏–π–Ω—è—Ç–∏ –∑–∞—è–≤–∫—É –≤ –æ–±—Ä–æ–±–∫—É")],
            [KeyboardButton("–ó–∞–∫—Ä–∏—Ç–∏ –∑–∞—è–≤–∫—É")],
            [KeyboardButton("–°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞—è–≤–∫—É")],
            [KeyboardButton("–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å")],
            [KeyboardButton("–î–µ–∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å –≤–æ–ª–æ–Ω—Ç–µ—Ä–∞")],
            [KeyboardButton("–í–∏—Ö—ñ–¥")]
        ]
    else:
        keyboard = [
            [KeyboardButton("–ü–æ–¥–∞—Ç–∏ –∑–∞—è–≤–∫—É")],
            [KeyboardButton("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∑–∞—è–≤–∫—É")],
            [KeyboardButton("–î–µ–∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –∑–∞—è–≤–∫—É")],
            [KeyboardButton("–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –º–æ—ó –∑–∞—è–≤–∫–∏")],
            [KeyboardButton("–î–µ–∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å –±–µ–Ω–µ—Ñ—ñ—Ü—ñ–∞—Ä–∞")],
            [KeyboardButton("–í–∏—Ö—ñ–¥")]
        ]

    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)
    await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=reply_markup)


registration_handler = ConversationHandler(
    entry_points=[
        CommandHandler("start", start),
        MessageHandler(filters.Regex("^–°—Ç–∞—Ç–∏ –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–º$"), start_volunteer_registration),
        MessageHandler(filters.Regex("^–°—Ç–∞—Ç–∏ –±–µ–Ω–µ—Ñ—ñ—Ü—ñ–∞—Ä–æ–º$"), start_beneficiary_registration),
    ],
    states={
        AWAIT_CONFIRMATION: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, check_and_start_registration),        ],
        AWAIT_AUTHORIZATION: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, handle_execute_request),
        ],

        ENTER_PHONE: [
            MessageHandler(filters.CONTACT | filters.TEXT & ~filters.COMMAND, enter_phone),
        ],
        ENTER_FIRSTNAME: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, enter_name),
        ],
        CHOOSE_DEVICE: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, choose_device),
        ],
        ENTER_LOCATION: [
            MessageHandler(filters.LOCATION | filters.TEXT & ~filters.COMMAND, enter_coordinates),
        ],
        CONFIRM_DATA: [
            MessageHandler(filters.Regex("^‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏"), send_to_api),
            MessageHandler(filters.Regex("^‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏$"), cancel),
        ],
        CONFIRM_OR_EDIT: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, handle_confirm_or_edit),
        ],
    },
    fallbacks=[
        CommandHandler("cancel", cancel),
        MessageHandler(filters.Regex("^‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏$"), cancel),
    ],
)