import logging
from datetime import datetime

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ContextTypes

from services.api_client import get_applications_by_type, refresh_token_log

ITEMS_PER_PAGE = 5


async def ensure_valid_token(context):
    """
    –ü–µ—Ä–µ–≤—ñ—Ä—è—î –¥—ñ–π—Å–Ω—ñ—Å—Ç—å access_token —ñ –æ–Ω–æ–≤–ª—é—î –π–æ–≥–æ –∑–∞ –ø–æ—Ç—Ä–µ–±–∏.
    """
    user_data = context.user_data

    refresh_token = user_data.get("refresh_token")
    if not refresh_token:
        await reset_to_start_menu(context)
        raise Exception("Refresh token is missing. User needs to reauthenticate.")

    try:

        tokens = await refresh_token_log(refresh_token)
        user_data["access_token"] = tokens["access_token"]
        user_data["refresh_token"] = tokens.get("refresh_token", refresh_token)
        return user_data["access_token"]
    except Exception as e:

        await reset_to_start_menu(context)
        raise Exception(f"Failed to refresh access token: {e}")


async def reset_to_start_menu(context: ContextTypes.DEFAULT_TYPE):
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ –º–µ–Ω—é.
    """
    if "user_id" in context.user_data:
        del context.user_data["user_id"]
    if "access_token" in context.user_data:
        del context.user_data["access_token"]
    if "refresh_token" in context.user_data:
        del context.user_data["refresh_token"]

    await context.bot.send_message(
        chat_id=context.user_data.get("chat_id"),
        text="–¢–µ—Ä–º—ñ–Ω –¥—ñ—ó –≤–∞—à–æ–≥–æ —Å–µ–∞–Ω—Å—É –∑–∞–∫—ñ–Ω—á–∏–≤—Å—è. –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.",
        reply_markup=START_KEYBOARD
    )


START_KEYBOARD = ReplyKeyboardMarkup(
    [
        [KeyboardButton("–°—Ç–∞—Ç–∏ –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–º")],
        [KeyboardButton("–°—Ç–∞—Ç–∏ –±–µ–Ω–µ—Ñ—ñ—Ü—ñ–∞—Ä–æ–º")],
    ],
    resize_keyboard=True, one_time_keyboard=False
)


async def choose_application_type_for_beneficiary(update, context):
    keyboard = [
        [InlineKeyboardButton("üü¢ –í –¥–æ—Å—Ç—É–ø—ñ", callback_data='accessible')],
        [InlineKeyboardButton("üü† –í –ø—Ä–æ—Ü–µ—Å—ñ", callback_data='is_progressing')],
        [InlineKeyboardButton("‚úÖ –í–∏–∫–æ–Ω–∞–Ω—ñ", callback_data='complete')]
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –∑–∞—è–≤–æ–∫ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –∞–±–æ —ñ–Ω—à—É —Ñ—É–Ω–∫—Ü—ñ—é:",
        reply_markup=reply_markup
    )


async def application_type_button_handler(update, context):
    query = update.callback_query
    application_type = query.data

    try:
        access_token = await ensure_valid_token(context)
    except Exception as e:
        await query.answer(text="üö´ –í–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ –∞–±–æ –≤–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –∑ —Ç–æ–∫–µ–Ω–æ–º. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.")
        return

    try:
        applications = await get_applications_by_type(access_token, application_type, "beneficiary")

        if isinstance(applications, dict) and 'detail' in applications:
            await query.edit_message_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∑–∞—è–≤–æ–∫: {applications['detail']}")
        elif not applications:
            await query.edit_message_text(f"‚ùå –ù–µ–º–∞—î –∑–∞—è–≤–æ–∫ —ñ–∑ —Ç–∏–ø–æ–º '{application_type}'.")
        else:
            applications = sorted(applications, key=lambda x: x['id'])

            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–∞—è–≤–∫–∏ —É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫–∏—Ö –¥–∞–Ω–∏—Ö
            context.user_data["applications_list"] = applications

            response_text = "–ó–∞—è–≤–∫–∏ –∑ —Ç–∏–ø–æ–º '{}' (–≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω—ñ –∑–∞ ID):\n\n".format(application_type)

            # –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤—Å—ñ—Ö –∑–∞—è–≤–æ–∫
            for app in applications:
                description = app.get("description", "–ù–µ–º–∞—î –æ–ø–∏—Å—É")
                active_to = app.get("active_to", "–ù–µ–º–∞—î –¥–∞—Ç–∏")

                response_text += (
                    f"üìù –ó–∞—è–≤–∫–∞ {app['id']}:\n"
                    f"üìã –û–ø–∏—Å: {description}\n"
                    f"üìÖ –ê–∫—Ç–∏–≤–Ω–∞ –¥–æ: {active_to}\n\n"
                )

            await query.edit_message_text(response_text)

    except Exception as e:
        await query.edit_message_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∑–∞—è–≤–æ–∫: {str(e)}")


async def view_all_applications(query, context):
    """
    –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –≤—Å—ñ—Ö –∑–∞—è–≤–æ–∫.
    –í—ñ–¥–æ–±—Ä–∞–∂–∞—î –≤—Å—ñ –∑–∞—è–≤–∫–∏ –±–µ–∑ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó –∑–∞ —Ç–∏–ø–æ–º.
    """
    try:
        access_token = await ensure_valid_token(context)
    except Exception as e:
        await query.answer(text="üö´ –í–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ –∞–±–æ –≤–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –∑ —Ç–æ–∫–µ–Ω–æ–º. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.")
        return

    try:
        applications = await get_applications_by_type(access_token, 'all', "beneficiary")

        if not applications:
            await query.edit_message_text(f"‚ùå –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∑–∞—è–≤–æ–∫.")
        else:

            applications = sorted(applications, key=lambda x: x['id'])

            response_text = "üìù –í—Å—ñ –∑–∞—è–≤–∫–∏ (–≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω—ñ –∑–∞ ID):\n\n"
            for app in applications:
                description = app.get("description", "–ù–µ–º–∞—î –æ–ø–∏—Å—É")
                active_to = app.get("active_to", "–ù–µ–º–∞—î –¥–∞—Ç–∏")

                response_text += (
                    f"üìù –ó–∞—è–≤–∫–∞ {app['id']}:\n"
                    f"üìã –û–ø–∏—Å: {description}\n"
                    f"üìÖ –ê–∫—Ç–∏–≤–Ω–∞ –¥–æ: {active_to}\n\n"
                )
            await query.edit_message_text(response_text)
    except Exception as e:
        logging.error(f"Error fetching applications: {str(e)}")
        await query.edit_message_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∑–∞—è–≤–æ–∫: {str(e)}")
