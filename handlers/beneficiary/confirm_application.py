from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import (
    Application,
    ContextTypes,
    ConversationHandler,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
)
from services.api_client import get_applications_by_type, confirm_application, refresh_token_log


CHOOSE_FINISHED_APPLICATION, CONFIRM_APPLICATION = range(2)



START_KEYBOARD = ReplyKeyboardMarkup(
    [
        [KeyboardButton("–°—Ç–∞—Ç–∏ –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–º")],
        [KeyboardButton("–°—Ç–∞—Ç–∏ –±–µ–Ω–µ—Ñ—ñ—Ü—ñ–∞—Ä–æ–º")],
    ],
    resize_keyboard=True, one_time_keyboard=False
)

async def ensure_valid_token(context: ContextTypes.DEFAULT_TYPE) -> str:
    """
    –ü–µ—Ä–µ–≤—ñ—Ä—è—î –¥—ñ–π—Å–Ω—ñ—Å—Ç—å access_token —ñ –æ–Ω–æ–≤–ª—é—î –π–æ–≥–æ –∑–∞ –ø–æ—Ç—Ä–µ–±–∏.
    """
    user_data = context.user_data


    refresh_token = user_data.get("refresh_token")
    if not refresh_token:

        await reset_to_start_menu(context)
        raise Exception("Refresh token is missing. User needs to reauthenticate.")

    try:

        tokens = await refresh_token_log(refresh_token)
        user_data["access_token"] = tokens["access_token"]
        user_data["refresh_token"] = tokens.get("refresh_token", refresh_token)
        return user_data["access_token"]
    except Exception as e:

        await reset_to_start_menu(context)
        raise Exception(f"Failed to refresh access token: {e}")

async def reset_to_start_menu(context: ContextTypes.DEFAULT_TYPE):
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ –º–µ–Ω—é.
    """
    if "user_id" in context.user_data:
        del context.user_data["user_id"]
    if "access_token" in context.user_data:
        del context.user_data["access_token"]
    if "refresh_token" in context.user_data:
        del context.user_data["refresh_token"]

    await context.bot.send_message(
        chat_id=context.user_data.get("chat_id"),
        text="‚ùóÔ∏è–¢–µ—Ä–º—ñ–Ω –¥—ñ—ó –≤–∞—à–æ–≥–æ —Å–µ–∞–Ω—Å—É –∑–∞–∫—ñ–Ω—á–∏–≤—Å—è. –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.",
        reply_markup=START_KEYBOARD
    )


async def start_confirming_finished_applications(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ—á–∞—Ç–æ–∫ –ø—Ä–æ—Ü–µ—Å—É –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—Ö –∑–∞—è–≤–æ–∫."""
    if not context.user_data.get("access_token"):
        await update.message.reply_text("‚ùå –í–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ. –°–ø–æ—á–∞—Ç–∫—É –≤–∏–∫–æ–Ω–∞–π—Ç–µ –≤—Ö—ñ–¥ –¥–æ —Å–∏—Å—Ç–µ–º–∏.")
        return ConversationHandler.END


    access_token = await ensure_valid_token(context)

    try:

        applications = await get_applications_by_type(access_token, application_type="complete", role="beneficiary")
        if not applications:
            await update.message.reply_text("üîç –ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –∑–∞–≤–µ—Ä—à–µ–Ω–∏—Ö –∑–∞—è–≤–æ–∫ –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.")
            return ConversationHandler.END


        keyboard = [
            [InlineKeyboardButton(f"ID: {app['id']} | {app['description']}", callback_data=str(app["id"]))]
            for app in applications
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("üìã –û–±–µ—Ä—ñ—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω—É –∑–∞—è–≤–∫—É –∑—ñ —Å–ø–∏—Å–∫—É –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è:", reply_markup=reply_markup)

        return CHOOSE_FINISHED_APPLICATION


    except PermissionError as e:
        await update.message.reply_text(f"üö´ –ü–æ–º–∏–ª–∫–∞ –¥–æ—Å—Ç—É–ø—É: {str(e)}")
    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: {str(e)}")
    return ConversationHandler.END

async def choose_finished_application(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ—ó –∑–∞—è–≤–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º."""
    query = update.callback_query
    await query.answer()
    application_id = query.data


    print(f"Selected application ID: {application_id}")


    context.user_data["selected_application_id"] = application_id

    keyboard = [
        [InlineKeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data="confirm")],
        [InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(
        text=f"üìù –í–∏ –≤–∏–±—Ä–∞–ª–∏ –∑–∞—è–≤–∫—É –∑ ID: {application_id}. –ü—ñ–¥—Ç–≤–µ—Ä–¥—å—Ç–µ —ó—ó –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∞–±–æ —Å–∫–∞—Å—É–π—Ç–µ:",
        reply_markup=reply_markup
    )
    return CONFIRM_APPLICATION

async def confirm_finished_application(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞—è–≤–∫–∏."""
    query = update.callback_query
    await query.answer()

    if query.data == "cancel":
        await query.edit_message_text("üö´ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞—è–≤–∫–∏ —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
        return ConversationHandler.END

    application_id = context.user_data.get("selected_application_id")


    print(f"Retrieved application ID: {application_id}")

    if not application_id:
        await query.edit_message_text("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: ID –∑–∞—è–≤–∫–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.")
        return ConversationHandler.END

    try:

        access_token = await ensure_valid_token(context)
    except Exception as e:
        await query.edit_message_text(f"üö® –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ —Ç–æ–∫–µ–Ω–∞: {str(e)}")
        return ConversationHandler.END

    try:

        application_id = int(application_id)
        print(f"Confirming application with ID: {application_id}")


        await confirm_application(application_id=application_id, access_token=access_token)
        await query.edit_message_text(f"‚úÖ –ó–∞—è–≤–∫–∞ –∑ ID {application_id} —É—Å–ø—ñ—à–Ω–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞!")
    except ValueError:
        await query.edit_message_text("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: ID –∑–∞—è–≤–∫–∏ –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–≤–∏–º.")
    except Exception as e:
        await query.edit_message_text(f"‚ö†Ô∏è –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: {str(e)}")

    return ConversationHandler.END


async def cancel_confirming_application(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–∫–∞—Å—É–≤–∞–Ω–Ω—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞—è–≤–∫–∏."""
    await update.message.reply_text("‚ùå –ü—Ä–æ—Ü–µ—Å –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞—è–≤–∫–∏ —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
    return ConversationHandler.END


finished_application_confirmation_handler = ConversationHandler(
    entry_points=[MessageHandler(filters.Regex("^–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∑–∞—è–≤–∫—É$"), start_confirming_finished_applications)],
    states={
        CHOOSE_FINISHED_APPLICATION: [CallbackQueryHandler(choose_finished_application)],
        CONFIRM_APPLICATION: [CallbackQueryHandler(confirm_finished_application)],
    },
    fallbacks=[CommandHandler("cancel", cancel_confirming_application)],
)
