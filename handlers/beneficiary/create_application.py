from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    ContextTypes,
    ConversationHandler,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
)
from services.api_client import create_application, get_categories, refresh_token_log
from decouple import config

CLIENT_NAME = config("CLIENT_NAME")
CLIENT_PASSWORD = config("CLIENT_PASSWORD")
ENTER_CATEGORY_ID, ENTER_DESCRIPTION, ENTER_LOCATION, ENTER_ACTIVE_TO, CONFIRM_DATA = range(5)

MAIN_KEYBOARD = ReplyKeyboardMarkup(
    [
        [KeyboardButton("–î–µ–∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å –±–µ–Ω–µ—Ñ—ñ—Ü—ñ–∞—Ä–∞")],
        [KeyboardButton("–ü–æ–¥–∞—Ç–∏ –∑–∞—è–≤–∫—É")],
        [KeyboardButton("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∑–∞—è–≤–∫—É")],
        [KeyboardButton("–î–µ–∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –∑–∞—è–≤–∫—É")],
        [KeyboardButton("–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –º–æ—ó –∑–∞—è–≤–∫–∏")],
        [KeyboardButton("–í–∏—Ö—ñ–¥")],
    ],
    resize_keyboard=True, one_time_keyboard=False
)


async def start_application_creation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ—á–∞—Ç–æ–∫ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞—è–≤–∫–∏."""
    try:
        categories = await get_categories(CLIENT_NAME, CLIENT_PASSWORD)

        if not categories:
            await update.message.reply_text("‚ùå **–ö–∞—Ç–µ–≥–æ—Ä—ñ—ó –≤—ñ–¥—Å—É—Ç–Ω—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.**")
            await update.message.reply_text("üîô –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.", reply_markup=MAIN_KEYBOARD)
            return ConversationHandler.END

        parent_categories = [cat for cat in categories if cat["parent_id"] is None]

        if not parent_categories:
            await update.message.reply_text("‚ùå **–ö–∞—Ç–µ–≥–æ—Ä—ñ—ó –≤–µ—Ä—Ö–Ω—å–æ–≥–æ —Ä—ñ–≤–Ω—è –≤—ñ–¥—Å—É—Ç–Ω—ñ.**")
            await update.message.reply_text("üîô –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.", reply_markup=MAIN_KEYBOARD)
            return ConversationHandler.END

        cancel_keyboard = ReplyKeyboardMarkup(
            [[KeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –ø–æ–¥–∞—á—É –∑–∞—è–≤–∫–∏")]], resize_keyboard=True, one_time_keyboard=True
        )
        await update.message.reply_text(
            "‚ùó **–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó, —è–∫—â–æ –∑–∞—Ö–æ—á–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ —è–∫—ñ—Å—å –¥–∞–Ω—ñ:**",
            reply_markup=cancel_keyboard)

        keyboard = [
            [InlineKeyboardButton(cat["name"], callback_data=f"parent_{cat['id']}")]
            for cat in parent_categories
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text("üìã **–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:**", reply_markup=reply_markup)

        context.user_data["categories"] = categories
        return ENTER_CATEGORY_ID

    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è **–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π:** {e}")
        await update.message.reply_text("üîô –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.", reply_markup=MAIN_KEYBOARD)
        return ConversationHandler.END


async def select_category(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó."""
    query = update.callback_query
    await query.answer()

    callback_data = query.data
    category_id = int(callback_data.split("_")[1])
    context.user_data["category_id"] = category_id

    categories = context.user_data.get("categories", [])
    subcategories = [cat for cat in categories if cat["parent_id"] == category_id]

    if subcategories:
        keyboard = [
            [InlineKeyboardButton(cat["name"], callback_data=f"parent_{cat['id']}")]
            for cat in subcategories
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text("üìã **–û–±–µ—Ä—ñ—Ç—å –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—é:**", reply_markup=reply_markup)
        return ENTER_CATEGORY_ID
    else:
        await query.edit_message_text(f"‚úÖ **–í–∏–±—Ä–∞–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é ID {category_id}.**\nüìù **–í–≤–µ–¥—ñ—Ç—å –æ–ø–∏—Å –≤–∞—à–æ—ó –∑–∞—è–≤–∫–∏:**")
        return ENTER_DESCRIPTION


async def get_description(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –æ–ø–∏—Å—É –∑–∞—è–≤–∫–∏."""
    description = update.message.text.strip()
    if description.lower() == "—Å–∫–∞—Å—É–≤–∞—Ç–∏ –ø–æ–¥–∞—á—É –∑–∞—è–≤–∫–∏":
        return await cancel_application(update, context)

    if not description:
        await update.message.reply_text("‚ùå **–û–ø–∏—Å –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º. –í–≤–µ–¥—ñ—Ç—å –æ–ø–∏—Å –∑–∞—è–≤–∫–∏:**")
        return ENTER_DESCRIPTION

    if len(description) > 256:
        await update.message.reply_text("‚ùå **–û–ø–∏—Å –Ω–µ –º–æ–∂–µ –ø–µ—Ä–µ–≤–∏—â—É–≤–∞—Ç–∏ 256 —Å–∏–º–≤–æ–ª—ñ–≤.** –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–æ—Ç—à–∏–π –æ–ø–∏—Å:")
        return ENTER_DESCRIPTION

    context.user_data["description"] = description

    keyboard = [
        [KeyboardButton("üì± –¢–∞–∫, —è –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ")],
        [KeyboardButton("üíª –ù—ñ, —è –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é –ü–ö")],
        [KeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –ø–æ–¥–∞—á—É –∑–∞—è–≤–∫–∏")],
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)

    await update.message.reply_text(
        "üìç **–í–∏ –ø—Ä–∞—Ü—é—î—Ç–µ –∑ —Ç–µ–ª–µ—Ñ–æ–Ω—É —á–∏ –ü–ö?** –¶–µ –¥–æ–ø–æ–º–æ–∂–µ –Ω–∞–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–ø—Ä–æ—Å–∏—Ç–∏ –≤–∞—à—É –ª–æ–∫–∞—Ü—ñ—é.",
        reply_markup=reply_markup
    )
    return ENTER_LOCATION


import re


async def get_location(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–æ–±–∫–∞ –ª–æ–∫–∞—Ü—ñ—ó –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –≤–∏–±–æ—Ä—É –ø—Ä–∏—Å—Ç—Ä–æ—é –∞–±–æ –≤–≤–µ–¥–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."""

    if update.message.text:
        user_response = update.message.text.strip()

        if user_response == "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –ø–æ–¥–∞—á—É –∑–∞—è–≤–∫–∏":
            return await cancel_application(update, context)

        elif user_response == "üì± –¢–∞–∫, —è –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ":

            keyboard = [[KeyboardButton("üìç –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –ª–æ–∫–∞—Ü—ñ—î—é", request_location=True)],
                        [KeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –ø–æ–¥–∞—á—É –∑–∞—è–≤–∫–∏")]]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)

            await update.message.reply_text(
                "üîî **–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –º–æ–±—ñ–ª—å–Ω–æ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É:**\n\n"
                "1. **–£–≤—ñ–º–∫–Ω—ñ—Ç—å –º—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è:**\n"
                "   - –î–ª—è **Android**: –ü–µ—Ä–µ–π–¥—ñ—Ç—å –¥–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å ‚Üí \"–ú—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è\" —ñ —É–≤—ñ–º–∫–Ω—ñ—Ç—å –π–æ–≥–æ.\n"
                "   - –î–ª—è **iPhone**: –ü–µ—Ä–µ–π–¥—ñ—Ç—å –¥–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å ‚Üí \"–ö–æ–Ω—Ñ—ñ–¥–µ–Ω—Ü—ñ–π–Ω—ñ—Å—Ç—å\" ‚Üí \"–ú—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è\" —ñ —É–≤—ñ–º–∫–Ω—ñ—Ç—å –π–æ–≥–æ.\n\n"
                "   - –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É \"üìç –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –ª–æ–∫–∞—Ü—ñ—î—é\".\n"
                "2. **–Ø–∫—â–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –≤–∏–±—Ä–∞—Ç–∏ —ñ–Ω—à—É —Ç–æ—á–∫—É –Ω–∞ –∫–∞—Ä—Ç—ñ:**\n"
                "   - **–í–∏–º–∫–Ω—ñ—Ç—å –º—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è** –≤ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è—Ö —Ç–µ–ª–µ—Ñ–æ–Ω—É.\n"
                "   - –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É \"üìç –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –ª–æ–∫–∞—Ü—ñ—î—é\".\n"
                "   - –ó'—è–≤–∏—Ç—å—Å—è –≤—ñ–∫–Ω–æ –∑ –∫–∞—Ä—Ç–æ—é, –¥–µ –≤–∏ –∑–º–æ–∂–µ—Ç–µ –≤—Ä—É—á–Ω—É –≤–∏–±—Ä–∞—Ç–∏ —Ç–æ—á–∫—É –∞–±–æ –ø–µ—Ä–µ–º—ñ—Å—Ç–∏—Ç–∏ –º–∞—Ä–∫–µ—Ä –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–µ –º—ñ—Å—Ü–µ.\n"
                "   - –ü—ñ—Å–ª—è –≤–∏–±–æ—Ä—É –ø–æ—Ç—Ä—ñ–±–Ω–æ—ó —Ç–æ—á–∫–∏, –ø—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –ª–æ–∫–∞—Ü—ñ—é —ñ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —ó—ó.",
                reply_markup=reply_markup, parse_mode="Markdown"
            )
            return ENTER_LOCATION

        elif user_response == "üíª –ù—ñ, —è –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é –ø–∫":
            keyboard = [[KeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –ø–æ–¥–∞—á—É –∑–∞—è–≤–∫–∏")]]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)

            await update.message.reply_text(
                "üíª **–Ø–∫ –∑–Ω–∞–π—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é Google Maps –Ω–∞ –ü–ö:**\n\n"
                "1Ô∏è‚É£ –í—ñ–¥–∫—Ä–∏–π—Ç–µ [Google Maps](https://www.google.com/maps) —É –≤–∞—à–æ–º—É –±—Ä–∞—É–∑–µ—Ä—ñ.\n"
                "2Ô∏è‚É£ –ó–Ω–∞–π–¥—ñ—Ç—å —Å–≤–æ—î –º—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –Ω–∞ –∫–∞—Ä—Ç—ñ, –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ –Ω–∞ –ø–æ—Ç—Ä—ñ–±–Ω—É —Ç–æ—á–∫—É –ª—ñ–≤–æ—é –∫–Ω–æ–ø–∫–æ—é –º–∏—à—ñ (–õ–ö–ú).\n"
                "3Ô∏è‚É£ –ù–∞–≤–µ–¥—ñ—Ç—å –∫—É—Ä—Å–æ—Ä –Ω–∞ –∫—Ä–∞–ø–∫—É, —è–∫–∞ –∑'—è–≤–∏–ª–∞—Å—è –Ω–∞ –∫–∞—Ä—Ç—ñ (–≤–∞—à–µ –º—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è) —Ç–∞ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –ø—Ä–∞–≤—É –∫–Ω–æ–ø–∫—É –º–∏—à—ñ (–ü–ö–ú).\n"
                "4Ô∏è‚É£ –£ –º–µ–Ω—é, —â–æ –∑'—è–≤–∏—Ç—å—Å—è, –∫–ª–∞—Ü–Ω—ñ—Ç—å –Ω–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –ª—ñ–≤–æ—é –∫–Ω–æ–ø–∫–æ—é –º–∏—à—ñ (–õ–ö–ú).\n"
                "5Ô∏è‚É£ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ (—à–∏—Ä–æ—Ç–∞ —Ç–∞ –¥–æ–≤–≥–æ—Ç–∞) –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Å–∫–æ–ø—ñ—é—é—Ç—å—Å—è –≤ –±—É—Ñ–µ—Ä –æ–±–º—ñ–Ω—É.\n"
                "6Ô∏è‚É£ –ü–æ–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ —Ü—å–æ–≥–æ —á–∞—Ç—É —ñ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –ø—Ä–∞–≤—É –∫–Ω–æ–ø–∫—É –º–∏—à—ñ (–ü–ö–ú) —É —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É –ø–æ–ª—ñ —á–∞—Ç—É, –∞ –ø–æ—Ç—ñ–º –≤–∏–±–µ—Ä—ñ—Ç—å **'–í—Å—Ç–∞–≤–∏—Ç–∏'**.\n"
                "   –¢–∞–∫–æ–∂ –º–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—é –∫–ª–∞–≤—ñ—à **Ctrl + V** –¥–ª—è –≤—Å—Ç–∞–≤–ª–µ–Ω–Ω—è.\n\n"
                "üìç **–ü—Ä–∏–∫–ª–∞–¥ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç:** `49.2827, -123.1216`", parse_mode="Markdown", reply_markup=reply_markup
            )
            return ENTER_LOCATION

        coordinates_match = re.match(r"^(-?\d+(\.\d+)?),\s*(-?\d+(\.\d+)?)$", user_response)
        if coordinates_match:

            latitude = float(coordinates_match.group(1))
            longitude = float(coordinates_match.group(3))
            context.user_data["location"] = {"latitude": latitude, "longitude": longitude}

            address = await reverse_geocode(latitude, longitude)
            context.user_data["location"]["address"] = address

            await update.message.reply_text(
                f"üéâ **–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –æ—Ç—Ä–∏–º–∞–Ω–æ!**\n"
                f"üìç **–ê–¥—Ä–µ—Å–∞:** {address}\n\n"
                "üóìÔ∏è –¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É, –¥–æ —è–∫–æ—ó –∑–∞—è–≤–∫–∞ –±—É–¥–µ –∞–∫—Ç–∏–≤–Ω–æ—é (—É —Ñ–æ—Ä–º–∞—Ç—ñ –î–î.–ú–ú.–†–†–†–† 00:00):",
                parse_mode="Markdown"
            )
            return ENTER_ACTIVE_TO

        else:

            context.user_data["location"] = {"address": user_response}
            await update.message.reply_text(
                "üéâ **–ê–¥—Ä–µ—Å—É –æ—Ç—Ä–∏–º–∞–Ω–æ!**\n\n"
                "üóìÔ∏è –¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É, –¥–æ —è–∫–æ—ó –∑–∞—è–≤–∫–∞ –±—É–¥–µ –∞–∫—Ç–∏–≤–Ω–æ—é (—É —Ñ–æ—Ä–º–∞—Ç—ñ –î–î.–ú–ú.–†–†–†–† 00:00):"
            )
            return ENTER_ACTIVE_TO



    elif update.message.location:
        context.user_data["location"] = {
            "latitude": update.message.location.latitude,
            "longitude": update.message.location.longitude,
        }
        await update.message.reply_text(
            "üìç **–õ–æ–∫–∞—Ü—ñ—é –æ—Ç—Ä–∏–º–∞–Ω–æ!**\n\n"
            "üóìÔ∏è –¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É, –¥–æ —è–∫–æ—ó –∑–∞—è–≤–∫–∞ –±—É–¥–µ –∞–∫—Ç–∏–≤–Ω–æ—é (—É —Ñ–æ—Ä–º–∞—Ç—ñ –î–î.–ú–ú.–†–†–†–† 00:00):"
        )
        return ENTER_ACTIVE_TO
    await update.message.reply_text("üö´ –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –≤–∞—à—É –ª–æ–∫–∞—Ü—ñ—é –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å –∞–¥—Ä–µ—Å—É –≤—Ä—É—á–Ω—É. üìç")
    return ENTER_LOCATION


import aiohttp

GOOGLE_GEOCODING_API_KEY = config("GOOGLE_GEOCODING_API_KEY")


async def reverse_geocode(latitude: float, longitude: float) -> str:
    """–ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –≤ –∞–¥—Ä–µ—Å—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é Google Maps Geocoding API."""
    url = (
        f"https://maps.googleapis.com/maps/api/geocode/json"
        f"?latlng={latitude},{longitude}&key={GOOGLE_GEOCODING_API_KEY}"
    )
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as response:
                data = await response.json()

                print(f"Geocoding API Response: {data}")
                if data["status"] == "OK" and data["results"]:
                    return data["results"][0]["formatted_address"]
                else:
                    return "–ê–¥—Ä–µ—Å—É –Ω–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ üòî"
    except Exception as e:
        return f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≥–µ–æ–∫–æ–¥—É–≤–∞–Ω–Ω—è: {e}"


async def get_active_to(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_data = context.user_data
    location = user_data.get("location", {})
    location_info = ""

    if "latitude" in location and "longitude" in location:
        address = await reverse_geocode(location["latitude"], location["longitude"])
        location_info = f"üìç **–ê–¥—Ä–µ—Å–∞:** {address}"
    elif "address" in location:
        location_info = f"üìç **–ê–¥—Ä–µ—Å–∞:** {location['address']}"
    else:
        location_info = "üö´ –õ–æ–∫–∞—Ü—ñ—è –Ω–µ –≤–∫–∞–∑–∞–Ω–∞."

    active_to = update.message.text.strip()
    context.user_data["active_to"] = active_to

    confirmation_message = (
        f"‚úÖ **–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –≤–≤–µ–¥–µ–Ω—ñ –¥–∞–Ω—ñ:**\n"
        f"- üÜî **–ö–∞—Ç–µ–≥–æ—Ä—ñ—è ID:** {user_data.get('category_id')}\n"
        f"- üìã **–û–ø–∏—Å:** {user_data.get('description')}\n"
        f"- {location_info}\n"
        f"- üóìÔ∏è **–ê–∫—Ç–∏–≤–Ω–∞ –¥–æ:** {active_to}"
    )

    keyboard = [
        [InlineKeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data="confirm_application")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(confirmation_message, reply_markup=reply_markup)
    cancel_keyboard = ReplyKeyboardMarkup(
        [[KeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –ø–æ–¥–∞—á—É –∑–∞—è–≤–∫–∏")]],
        resize_keyboard=True,
        one_time_keyboard=False
    )
    await update.message.reply_text(
        "‚ùó –Ø–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ —Å–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞—è–≤–∫—É, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ:",
        reply_markup=cancel_keyboard
    )
    return CONFIRM_DATA


START_KEYBOARD = ReplyKeyboardMarkup(
    [
        [KeyboardButton("–°—Ç–∞—Ç–∏ –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–º")],
        [KeyboardButton("–°—Ç–∞—Ç–∏ –±–µ–Ω–µ—Ñ—ñ—Ü—ñ–∞—Ä–æ–º")],
    ],
    resize_keyboard=True, one_time_keyboard=False
)


async def ensure_valid_token(context: ContextTypes.DEFAULT_TYPE) -> str:
    user_data = context.user_data

    refresh_token = user_data.get("refresh_token")
    if not refresh_token:
        await reset_to_start_menu(context)
        raise Exception("Refresh token is missing. User needs to reauthenticate.")

    try:
        tokens = await refresh_token_log(refresh_token)
        user_data["access_token"] = tokens["access_token"]
        user_data["refresh_token"] = tokens.get("refresh_token", refresh_token)
        return user_data["access_token"]
    except Exception as e:

        await reset_to_start_menu(context)
        raise Exception(f"Failed to refresh access token: {e}")


async def reset_to_start_menu(context: ContextTypes.DEFAULT_TYPE):
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ –º–µ–Ω—é.
    """
    if "user_id" in context.user_data:
        del context.user_data["user_id"]
    if "access_token" in context.user_data:
        del context.user_data["access_token"]
    if "refresh_token" in context.user_data:
        del context.user_data["refresh_token"]

    await context.bot.send_message(
        chat_id=context.user_data.get("chat_id"),
        text="–¢–µ—Ä–º—ñ–Ω –¥—ñ—ó –≤–∞—à–æ–≥–æ —Å–µ–∞–Ω—Å—É –∑–∞–∫—ñ–Ω—á–∏–≤—Å—è. –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.",
        reply_markup=START_KEYBOARD
    )


async def confirm_application(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞—è–≤–∫–∏."""
    query = update.callback_query
    await query.answer()

    user_data = context.user_data
    access_token = user_data.get("access_token")

    try:

        result = await create_application(
            description=user_data["description"],
            category_id=user_data.get("category_id"),
            address=user_data["location"].get("address"),
            latitude=user_data["location"].get("latitude"),
            longitude=user_data["location"].get("longitude"),
            active_to=user_data["active_to"],
            access_token=access_token,
        )
        await query.edit_message_text(f"üéâ **–ó–∞—è–≤–∫–∞ —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–∞!**\nID: {result['id']}")
    except Exception as e:
        if "401" in str(e):
            try:
                access_token = await ensure_valid_token(context)

                result = await create_application(
                    description=user_data["description"],
                    category_id=user_data.get("category_id"),
                    address=user_data["location"].get("address"),
                    latitude=user_data["location"].get("latitude"),
                    longitude=user_data["location"].get("longitude"),
                    active_to=user_data["active_to"],
                    access_token=access_token,
                )
                await query.edit_message_text(f"üéâ **–ó–∞—è–≤–∫–∞ —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–∞!**\nID: {result['id']}")
            except Exception as refresh_error:
                await query.edit_message_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ —Ç–æ–∫–µ–Ω–∞: {refresh_error}")
                return ConversationHandler.END
        else:
            await query.edit_message_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∑–∞—è–≤–∫–∏: {e}")

    await query.message.reply_text("üîô –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.", reply_markup=MAIN_KEYBOARD)
    return ConversationHandler.END


async def cancel_application(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–∫–∞—Å—É–≤–∞–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞—è–≤–∫–∏."""
    query = update.callback_query
    if query:
        await query.answer()
        await query.edit_message_text("‚ùå **–ü—Ä–æ—Ü–µ—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞—è–≤–∫–∏ —Å–∫–∞—Å–æ–≤–∞–Ω–æ.**")
    else:
        await update.message.reply_text("‚ùå **–ü—Ä–æ—Ü–µ—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞—è–≤–∫–∏ —Å–∫–∞—Å–æ–≤–∞–Ω–æ.**")

    await update.message.reply_text("üîô –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.", reply_markup=MAIN_KEYBOARD)
    return ConversationHandler.END


application_creation_handler = ConversationHandler(
    entry_points=[MessageHandler(filters.Regex("^–ü–æ–¥–∞—Ç–∏ –∑–∞—è–≤–∫—É$"), start_application_creation)],
    states={
        ENTER_CATEGORY_ID: [
            CallbackQueryHandler(select_category, pattern=r"^parent_\d+$"),
            MessageHandler(filters.TEXT & filters.Regex("^‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –ø–æ–¥–∞—á—É –∑–∞—è–≤–∫–∏$"), cancel_application),
        ],
        ENTER_DESCRIPTION: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, get_description),
            MessageHandler(filters.TEXT & filters.Regex("^‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –ø–æ–¥–∞—á—É –∑–∞—è–≤–∫–∏$"), cancel_application),
        ],
        ENTER_LOCATION: [
            MessageHandler(filters.LOCATION, get_location),
            MessageHandler(filters.TEXT & ~filters.COMMAND, get_location),
            MessageHandler(filters.TEXT & filters.Regex("^‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –ø–æ–¥–∞—á—É –∑–∞—è–≤–∫–∏$"), cancel_application),
        ],
        ENTER_ACTIVE_TO: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, get_active_to),
            MessageHandler(filters.TEXT & filters.Regex("^‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –ø–æ–¥–∞—á—É –∑–∞—è–≤–∫–∏$"), cancel_application),
        ],
        CONFIRM_DATA: [
            CallbackQueryHandler(confirm_application, pattern="^confirm_application$"),
            MessageHandler(filters.TEXT & filters.Regex("^‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –ø–æ–¥–∞—á—É –∑–∞—è–≤–∫–∏$"), cancel_application),
        ],
    },
    fallbacks=[CommandHandler("cancel", cancel_application)],
)
