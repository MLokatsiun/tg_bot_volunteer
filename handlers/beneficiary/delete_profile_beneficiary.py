from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ContextTypes, ConversationHandler, MessageHandler, filters
from services.api_client import deactivate_beneficiary_profile, refresh_token_log  # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü—ñ—ó

ENTER_DEACTIVATION_CONFIRMATION_VOLUNTEER = range(1)

MAIN_KEYBOARD = ReplyKeyboardMarkup(
    [
        [KeyboardButton("–î–µ–∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å –≤–æ–ª–æ–Ω—Ç–µ—Ä–∞")],
        [KeyboardButton("–ü–æ–¥–∞—Ç–∏ –∑–∞—è–≤–∫—É")],
        [KeyboardButton("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∑–∞—è–≤–∫—É")],
        [KeyboardButton("–î–µ–∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –∑–∞—è–≤–∫—É")],
        [KeyboardButton("–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –º–æ—ó –∑–∞—è–≤–∫–∏")],
        [KeyboardButton("–í–∏—Ö—ñ–¥")],
    ],
    resize_keyboard=True, one_time_keyboard=False,
)

AUTH_KEYBOARD = ReplyKeyboardMarkup(
    [
        [KeyboardButton("–°—Ç–∞—Ç–∏ –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–º"), KeyboardButton("–°—Ç–∞—Ç–∏ –±–µ–Ω–µ—Ñ—ñ—Ü—ñ–∞—Ä–æ–º")],
    ],
    resize_keyboard=True, one_time_keyboard=False,
)


async def reset_to_start_menu(context: ContextTypes.DEFAULT_TYPE):
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ –º–µ–Ω—é.
    """
    if "user_id" in context.user_data:
        del context.user_data["user_id"]
    if "access_token" in context.user_data:
        del context.user_data["access_token"]
    if "refresh_token" in context.user_data:
        del context.user_data["refresh_token"]

    await context.bot.send_message(
        chat_id=context.user_data.get("chat_id"),
        text="–¢–µ—Ä–º—ñ–Ω –¥—ñ—ó –≤–∞—à–æ–≥–æ —Å–µ–∞–Ω—Å—É –∑–∞–∫—ñ–Ω—á–∏–≤—Å—è. –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.",
        reply_markup=AUTH_KEYBOARD
    )


async def ensure_valid_token(context: ContextTypes.DEFAULT_TYPE) -> str:
    """
    –ü–µ—Ä–µ–≤—ñ—Ä—è—î –¥—ñ–π—Å–Ω—ñ—Å—Ç—å access_token —ñ –æ–Ω–æ–≤–ª—é—î –π–æ–≥–æ –∑–∞ –ø–æ—Ç—Ä–µ–±–∏.
    """
    user_data = context.user_data

    refresh_token = user_data.get("refresh_token")
    if not refresh_token:
        await reset_to_start_menu(context)
        raise Exception("Refresh token is missing. User needs to reauthenticate.")

    try:

        tokens = await refresh_token_log(refresh_token)
        user_data["access_token"] = tokens["access_token"]
        user_data["refresh_token"] = tokens.get("refresh_token", refresh_token)
        return user_data["access_token"]
    except Exception as e:

        await reset_to_start_menu(context)
        raise Exception(f"Failed to refresh access token: {e}")


async def start_deactivation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–ø–∏—Ç –Ω–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü—ñ—é –ø—Ä–æ—Ñ—ñ–ª—é –≤–æ–ª–æ–Ω—Ç–µ—Ä–∞."""
    keyboard = [
        [KeyboardButton("‚úÖ –¢–∞–∫, –¥–µ–∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –º—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å")],
        [KeyboardButton("‚ùå –ù—ñ, —Å–∫–∞—Å—É–≤–∞—Ç–∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü—ñ—é")],
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    await update.message.reply_text(
        "‚ö†Ô∏è –í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –¥–µ–∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ —Å–≤—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å –±–µ–Ω–µ—Ñ—ñ—Ü—ñ–∞—Ä–∞? –¶–µ –Ω–µ–∑–≤–æ—Ä–æ—Ç–Ω–∞ –¥—ñ—è.",
        reply_markup=reply_markup,
    )
    return ENTER_DEACTIVATION_CONFIRMATION_VOLUNTEER


async def confirm_deactivation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü—ñ—ó –ø—Ä–æ—Ñ—ñ–ª—é –≤–æ–ª–æ–Ω—Ç–µ—Ä–∞."""
    text = update.message.text.lower()

    if text == "—Ç–∞–∫, –¥–µ–∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –º—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å".lower():
        access_token = await ensure_valid_token(context)

        result = await deactivate_beneficiary_profile(access_token)
        if result:
            await update.message.reply_text("‚úÖ –í–∞—à –ø—Ä–æ—Ñ—ñ–ª—å –±–µ–Ω–µ—Ñ—ñ—Ü—ñ–∞—Ä–∞ —É—Å–ø—ñ—à–Ω–æ –¥–µ–∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ.")

            await update.message.reply_text(
                "üîë –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—è –∞–±–æ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—è –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ—ó —Ä–æ–±–æ—Ç–∏:",
                reply_markup=AUTH_KEYBOARD,
            )
        else:
            await update.message.reply_text("‚ö†Ô∏è –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü—ñ—ó –ø—Ä–æ—Ñ—ñ–ª—é.")

            await update.message.reply_text("üîô –ü–æ–≤–µ—Ä—Ç–∞—é—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é:", reply_markup=MAIN_KEYBOARD)
    elif text == "–Ω—ñ, —Å–∫–∞—Å—É–≤–∞—Ç–∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü—ñ—é".lower():
        await update.message.reply_text("‚ùå –î–µ–∞–∫—Ç–∏–≤–∞—Ü—ñ—è –ø—Ä–æ—Ñ—ñ–ª—é –≤–æ–ª–æ–Ω—Ç–µ—Ä–∞ —Å–∫–∞—Å–æ–≤–∞–Ω–∞.")

        await update.message.reply_text("üîô –ü–æ–≤–µ—Ä—Ç–∞—é—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é:", reply_markup=MAIN_KEYBOARD)
    else:
        await update.message.reply_text("‚ö†Ô∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –æ–¥–Ω—É –∑ –Ω–∞–¥–∞–Ω–∏—Ö –æ–ø—Ü—ñ–π.")

    return ConversationHandler.END


deactivation_handler_ben = ConversationHandler(
    entry_points=[MessageHandler(filters.Regex("^–î–µ–∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å –±–µ–Ω–µ—Ñ—ñ—Ü—ñ–∞—Ä–∞"), start_deactivation)],
    states={
        ENTER_DEACTIVATION_CONFIRMATION_VOLUNTEER: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, confirm_deactivation)],
    },
    fallbacks=[],
)
