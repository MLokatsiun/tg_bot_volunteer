import re

import aiohttp
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler, MessageHandler, CallbackQueryHandler, filters

from handlers.beneficiary.create_application import reverse_geocode
from services.api_client import edit_volunteer_location_and_categories, get_categories, refresh_token_log
from decouple import config
CLIENT_NAME = config('CLIENT_NAME')
CLIENT_PASSWORD = config('CLIENT_PASSWORD')

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏ –¥–ª—è —Å—Ç–∞–Ω—ñ–≤
ENTER_LOCATION, ENTER_CATEGORIES, CONFIRM_EDIT = range(3)

async def start_edit_profile(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ—á–∞—Ç–æ–∫ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é –≤–æ–ª–æ–Ω—Ç–µ—Ä–∞."""
    if not context.user_data.get("access_token"):
        await update.message.reply_text("‚ùó –í–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ. –°–ø–æ—á–∞—Ç–∫—É –≤–∏–∫–æ–Ω–∞–π—Ç–µ –≤—Ö—ñ–¥ –¥–æ —Å–∏—Å—Ç–µ–º–∏.")
        return ConversationHandler.END

    keyboard = [
        [KeyboardButton("üì± –Ø –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ")],
        [KeyboardButton("üíª –Ø –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é –ü–ö")],
        [KeyboardButton("üö´ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏")],
        [KeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è")],
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)
    await update.message.reply_text(
        "üîÑ –ü–æ–¥—ñ–ª—ñ—Ç—å—Å—è –≤–∞—à–æ—é –Ω–æ–≤–æ—é –ª–æ–∫–∞—Ü—ñ—î—é, –≤–≤–µ–¥—ñ—Ç—å –∞–¥—Ä–µ—Å—É –∞–±–æ –æ–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –≤–≤–µ–¥–µ–Ω–Ω—è:",
        reply_markup=reply_markup
    )
    return ENTER_LOCATION

async def skip_location(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü—Ä–æ–ø—É—Å–∫ –≤–≤–µ–¥–µ–Ω–Ω—è –ª–æ–∫–∞—Ü—ñ—ó."""
    await update.message.reply_text("üìç –õ–æ–∫–∞—Ü—ñ—è –∑–∞–ª–∏—à–∏—Ç—å—Å—è –Ω–µ–∑–º—ñ–Ω–Ω–æ—é. üîÑ")

    return await enter_location(update, context)

async def enter_location(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è –Ω–æ–≤–æ—ó –ª–æ–∫–∞—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."""
    if update.message.text:
        user_response = update.message.text.strip().lower()

        if user_response == "‚ùå —Å–∫–∞—Å—É–≤–∞—Ç–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è":
            return await cancel_edit(update, context)

        if user_response == "üö´ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏":
            await update.message.reply_text("üìç –õ–æ–∫–∞—Ü—ñ—è –∑–∞–ª–∏—à–∏—Ç—å—Å—è –Ω–µ–∑–º—ñ–Ω–Ω–æ—é.")
            return await proceed_to_categories(update, context)

        if user_response == "üì± —è –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ":
            keyboard = [
                [KeyboardButton("üìç –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –ª–æ–∫–∞—Ü—ñ—î—é", request_location=True)],
                [KeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è")]
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
            await update.message.reply_text(
                "üîî **–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –º–æ–±—ñ–ª—å–Ω–æ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É:**\n\n"
                "1. **–£–≤—ñ–º–∫–Ω—ñ—Ç—å –º—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è:**\n"
                "   - –î–ª—è **Android**: –ü–µ—Ä–µ–π–¥—ñ—Ç—å –¥–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å ‚Üí \"–ú—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è\" —ñ —É–≤—ñ–º–∫–Ω—ñ—Ç—å –π–æ–≥–æ.\n"
                "   - –î–ª—è **iPhone**: –ü–µ—Ä–µ–π–¥—ñ—Ç—å –¥–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å ‚Üí \"–ö–æ–Ω—Ñ—ñ–¥–µ–Ω—Ü—ñ–π–Ω—ñ—Å—Ç—å\" ‚Üí \"–ú—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è\" —ñ —É–≤—ñ–º–∫–Ω—ñ—Ç—å –π–æ–≥–æ.\n\n"
                "   - –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É \"üìç –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –ª–æ–∫–∞—Ü—ñ—î—é\".\n"
                "2. **–Ø–∫—â–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –≤–∏–±—Ä–∞—Ç–∏ —ñ–Ω—à—É —Ç–æ—á–∫—É –Ω–∞ –∫–∞—Ä—Ç—ñ:**\n"
                "   - **–í–∏–º–∫–Ω—ñ—Ç—å –º—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è** –≤ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è—Ö —Ç–µ–ª–µ—Ñ–æ–Ω—É.\n"
                "   - –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É \"üìç –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –ª–æ–∫–∞—Ü—ñ—î—é\".\n"
                "   - –ó'—è–≤–∏—Ç—å—Å—è –≤—ñ–∫–Ω–æ –∑ –∫–∞—Ä—Ç–æ—é, –¥–µ –≤–∏ –∑–º–æ–∂–µ—Ç–µ –≤—Ä—É—á–Ω—É –≤–∏–±—Ä–∞—Ç–∏ —Ç–æ—á–∫—É –∞–±–æ –ø–µ—Ä–µ–º—ñ—Å—Ç–∏—Ç–∏ –º–∞—Ä–∫–µ—Ä –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–µ –º—ñ—Å—Ü–µ.\n"
                "   - –ü—ñ—Å–ª—è –≤–∏–±–æ—Ä—É –ø–æ—Ç—Ä—ñ–±–Ω–æ—ó —Ç–æ—á–∫–∏, –ø—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –ª–æ–∫–∞—Ü—ñ—é —ñ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —ó—ó.",
                reply_markup=reply_markup, parse_mode="Markdown"
            )
            return ENTER_LOCATION

        elif user_response == "üíª —è –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é –ø–∫":
            keyboard = [[KeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è")]]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
            await update.message.reply_text(
                "üíª **–Ø–∫ –∑–Ω–∞–π—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é Google Maps –Ω–∞ –ü–ö:**\n\n"
                "1Ô∏è‚É£ –í—ñ–¥–∫—Ä–∏–π—Ç–µ [Google Maps](https://www.google.com/maps) —É –≤–∞—à–æ–º—É –±—Ä–∞—É–∑–µ—Ä—ñ.\n"
                "2Ô∏è‚É£ –ó–Ω–∞–π–¥—ñ—Ç—å —Å–≤–æ—î –º—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –Ω–∞ –∫–∞—Ä—Ç—ñ, –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ –Ω–∞ –ø–æ—Ç—Ä—ñ–±–Ω—É —Ç–æ—á–∫—É –ª—ñ–≤–æ—é –∫–Ω–æ–ø–∫–æ—é –º–∏—à—ñ (–õ–ö–ú).\n"
                "3Ô∏è‚É£ –ù–∞–≤–µ–¥—ñ—Ç—å –∫—É—Ä—Å–æ—Ä –Ω–∞ –∫—Ä–∞–ø–∫—É, —è–∫–∞ –∑'—è–≤–∏–ª–∞—Å—è –Ω–∞ –∫–∞—Ä—Ç—ñ (–≤–∞—à–µ –º—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è) —Ç–∞ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –ø—Ä–∞–≤—É –∫–Ω–æ–ø–∫—É –º–∏—à—ñ (–ü–ö–ú).\n"
                "4Ô∏è‚É£ –£ –º–µ–Ω—é, —â–æ –∑'—è–≤–∏—Ç—å—Å—è, –∫–ª–∞—Ü–Ω—ñ—Ç—å –Ω–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –ª—ñ–≤–æ—é –∫–Ω–æ–ø–∫–æ—é –º–∏—à—ñ (–õ–ö–ú).\n"
                "5Ô∏è‚É£ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ (—à–∏—Ä–æ—Ç–∞ —Ç–∞ –¥–æ–≤–≥–æ—Ç–∞) –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Å–∫–æ–ø—ñ—é—é—Ç—å—Å—è –≤ –±—É—Ñ–µ—Ä –æ–±–º—ñ–Ω—É.\n"
                "6Ô∏è‚É£ –ü–æ–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ —Ü—å–æ–≥–æ —á–∞—Ç—É —ñ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –ø—Ä–∞–≤—É –∫–Ω–æ–ø–∫—É –º–∏—à—ñ (–ü–ö–ú) —É —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É –ø–æ–ª—ñ —á–∞—Ç—É, –∞ –ø–æ—Ç—ñ–º –≤–∏–±–µ—Ä—ñ—Ç—å **'–í—Å—Ç–∞–≤–∏—Ç–∏'**.\n"
                "   –¢–∞–∫–æ–∂ –º–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—é –∫–ª–∞–≤—ñ—à **Ctrl + V** –¥–ª—è –≤—Å—Ç–∞–≤–ª–µ–Ω–Ω—è.\n\n"
                "üìç **–ü—Ä–∏–∫–ª–∞–¥ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç:** `49.2827, -123.1216`", parse_mode="Markdown", reply_markup=reply_markup
            )
            return ENTER_LOCATION

        coordinates_match = re.match(r"^(-?\d+(\.\d+)?),\s*(-?\d+(\.\d+)?)$", user_response)
        if coordinates_match:
            latitude = float(coordinates_match.group(1))
            longitude = float(coordinates_match.group(3))
            context.user_data["edit_location"] = {
                "latitude": latitude,
                "longitude": longitude
            }

            address = await reverse_geocode(latitude, longitude)
            context.user_data["edit_location"]["address"] = address

            await update.message.reply_text(
                f"‚úÖ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –æ—Ç—Ä–∏–º–∞–Ω–æ. –í–∏–∑–Ω–∞—á–µ–Ω–∞ –∞–¥—Ä–µ—Å–∞: {address}."
            )
            return await proceed_to_categories(update, context)

        else:
            context.user_data["edit_location"] = {"address": user_response}
            await update.message.reply_text(
                "‚úÖ –ê–¥—Ä–µ—Å—É –æ—Ç—Ä–∏–º–∞–Ω–æ. –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –∫—Ä–æ–∫—É."
            )
            return await proceed_to_categories(update, context)

    elif update.message.location:
        latitude = update.message.location.latitude
        longitude = update.message.location.longitude
        context.user_data["edit_location"] = {
            "latitude": latitude,
            "longitude": longitude
        }

        address = await reverse_geocode(latitude, longitude)
        context.user_data["edit_location"]["address"] = address

        await update.message.reply_text(
            f"üìç –õ–æ–∫–∞—Ü—ñ—é –æ—Ç—Ä–∏–º–∞–Ω–æ. –í–∏–∑–Ω–∞—á–µ–Ω–∞ –∞–¥—Ä–µ—Å–∞: {address}."
        )
        return await proceed_to_categories(update, context)

    else:
        await update.message.reply_text("‚ùì –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –≤–∞—à—É –ª–æ–∫–∞—Ü—ñ—é, –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –∞–±–æ –∞–¥—Ä–µ—Å—É.")
        return ENTER_LOCATION

async def proceed_to_categories(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –¥–æ –≤–∏–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –ø—ñ—Å–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è –ª–æ–∫–∞—Ü—ñ—ó."""
    try:
        categories = await get_categories(CLIENT_NAME, CLIENT_PASSWORD)

        if not categories:
            await update.message.reply_text("–ö–∞—Ç–µ–≥–æ—Ä—ñ—ó –≤—ñ–¥—Å—É—Ç–Ω—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
            return ConversationHandler.END

        parent_categories = [cat for cat in categories if cat["parent_id"] is None]

        if not parent_categories:
            await update.message.reply_text("–ö–∞—Ç–µ–≥–æ—Ä—ñ—ó –≤–µ—Ä—Ö–Ω—å–æ–≥–æ —Ä—ñ–≤–Ω—è –≤—ñ–¥—Å—É—Ç–Ω—ñ.")
            return ConversationHandler.END

        keyboard = [
            [InlineKeyboardButton(cat["name"], callback_data=f"parent_{cat['id']}")]
            for cat in parent_categories
        ]
        keyboard.append([InlineKeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç–∏ –≤–∏–±—ñ—Ä", callback_data="finish_selection")])
        reply_markup = InlineKeyboardMarkup(keyboard)

        context.user_data["categories"] = categories
        context.user_data["selected_categories"] = []
        context.user_data["current_parent_id"] = None

        cancel_keyboard = [[KeyboardButton("–°–∫–∞—Å—É–≤–∞—Ç–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è")]]
        cancel_reply_markup = ReplyKeyboardMarkup(cancel_keyboard, resize_keyboard=True, one_time_keyboard=True)

        await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è:", reply_markup=reply_markup)
        await update.message.reply_text("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± —Å–∫–∞—Å—É–≤–∞—Ç–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è:", reply_markup=cancel_reply_markup)

        return ENTER_CATEGORIES

    except Exception as e:
        await update.message.reply_text(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π: {e}")
        return ConversationHandler.END


async def select_category(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó."""
    query = update.callback_query
    await query.answer()

    callback_data = query.data

    if callback_data == "finish_selection":
        selected_categories = context.user_data.get("selected_categories", [])
        if not selected_categories:
            await query.edit_message_text("‚ö†Ô∏è –í–∏ –Ω–µ –æ–±—Ä–∞–ª–∏ –∂–æ–¥–Ω–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó.")
            return ENTER_CATEGORIES

        await query.edit_message_text("‚úÖ –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó –æ–±—Ä–∞–Ω–æ.")
        await query.message.reply_text(
            "üîÑ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é?",
            reply_markup=ReplyKeyboardMarkup(
                [[KeyboardButton("‚úÖ –¢–∞–∫"), KeyboardButton("‚ùå –ù—ñ")]],
                resize_keyboard=True,
            )
        )
        return CONFIRM_EDIT

    if callback_data == "back_to_parents":
        categories = context.user_data.get("categories", [])
        selected_categories = context.user_data.get("selected_categories", [])
        parent_categories = [cat for cat in categories if cat["parent_id"] is None]

        keyboard = [
            [InlineKeyboardButton(
                f"{cat['name']} {'‚úÖ' if cat['id'] in selected_categories else ''}",
                callback_data=f"parent_{cat['id']}"
            )]
            for cat in parent_categories
        ]
        keyboard.append([InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –≤–∏–±—ñ—Ä", callback_data="finish_selection")])

        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "üîÑ –û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó (‚úÖ –ø–æ–∑–Ω–∞—á–µ–Ω–æ –æ–±—Ä–∞–Ω—ñ):",
            reply_markup=reply_markup,
        )
        context.user_data["current_parent_id"] = None
        return ENTER_CATEGORIES


    category_id = int(callback_data.split("_")[1])
    categories = context.user_data.get("categories", [])
    selected_categories = context.user_data.setdefault("selected_categories", [])


    if category_id in selected_categories:
        selected_categories.remove(category_id)
    else:
        selected_categories.append(category_id)


    subcategories = [cat for cat in categories if cat["parent_id"] == category_id]

    if subcategories:
        context.user_data["current_parent_id"] = category_id

        keyboard = [
            [InlineKeyboardButton(
                f"{cat['name']} {'‚úÖ' if cat['id'] in selected_categories else ''}",
                callback_data=f"category_{cat['id']}"
            )]
            for cat in subcategories
        ]
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π", callback_data="back_to_parents")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "üîÑ –û—Å—å –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –¥–ª—è –≤–∞—à–æ–≥–æ –≤–∏–±–æ—Ä—É:",
            reply_markup=reply_markup,
        )
    else:

        current_parent_id = context.user_data.get("current_parent_id")
        subcategories = [cat for cat in categories if cat["parent_id"] == current_parent_id]

        keyboard = [
            [InlineKeyboardButton(
                f"{cat['name']} {'‚úÖ' if cat['id'] in selected_categories else ''}",
                callback_data=f"parent_{cat['id']}"
            )]
            for cat in subcategories
        ]

        if current_parent_id:
            keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π", callback_data="back_to_parents")])
        keyboard.append([InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –≤–∏–±—ñ—Ä", callback_data="finish_selection")])

        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "–û–±–µ—Ä—ñ—Ç—å –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—ó (‚úÖ –ø–æ–∑–Ω–∞—á–µ–Ω–æ –æ–±—Ä–∞–Ω—ñ):",
            reply_markup=reply_markup,
        )

    return ENTER_CATEGORIES

async def ensure_valid_token(context: ContextTypes.DEFAULT_TYPE) -> str:
    user_data = context.user_data

    refresh_token = user_data.get("refresh_token")
    if not refresh_token:
        await reset_to_start_menu(context)
        raise Exception("Refresh token is missing. User needs to reauthenticate.")

    try:
        tokens = await refresh_token_log(refresh_token)
        user_data["access_token"] = tokens["access_token"]
        user_data["refresh_token"] = tokens.get("refresh_token", refresh_token)
        return user_data["access_token"]
    except Exception as e:

        await reset_to_start_menu(context)
        raise Exception(f"Failed to refresh access token: {e}")


async def reset_to_start_menu(context: ContextTypes.DEFAULT_TYPE):
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ –º–µ–Ω—é.
    """
    if "user_id" in context.user_data:
        del context.user_data["user_id"]
    if "access_token" in context.user_data:
        del context.user_data["access_token"]
    if "refresh_token" in context.user_data:
        del context.user_data["refresh_token"]

    await context.bot.send_message(
        chat_id=context.user_data.get("chat_id"),
        text="–¢–µ—Ä–º—ñ–Ω –¥—ñ—ó –≤–∞—à–æ–≥–æ —Å–µ–∞–Ω—Å—É –∑–∞–∫—ñ–Ω—á–∏–≤—Å—è. –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.",
        reply_markup=START_KEYBOARD
    )
START_KEYBOARD = ReplyKeyboardMarkup(
    [
        [KeyboardButton("–°—Ç–∞—Ç–∏ –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–º")],
        [KeyboardButton("–°—Ç–∞—Ç–∏ –±–µ–Ω–µ—Ñ—ñ—Ü—ñ–∞—Ä–æ–º")],
    ],
    resize_keyboard=True, one_time_keyboard=False
)

async def confirm_edit(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é."""
    if update.message.text == "‚ùå –ù—ñ":
        await update.message.reply_text("üîÑ –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –í–∞—à –ø—Ä–æ—Ñ—ñ–ª—å –Ω–µ –±—É–ª–æ –∑–º—ñ–Ω–µ–Ω–æ.")
        return ConversationHandler.END

    if update.message.text.lower() == "‚úÖ —Ç–∞–∫":
        access_token = context.user_data.get("access_token")
        location = context.user_data.get("edit_location")
        category_ids = context.user_data.get("selected_categories")


        if location is None:

            location = None


        if category_ids is None:
            category_ids = []

        try:

            access_token = await ensure_valid_token(context)

            await edit_volunteer_location_and_categories(access_token, location, category_ids)


            await update.message.reply_text("‚úÖ –í–∞—à –ø—Ä–æ—Ñ—ñ–ª—å –±—É–ª–æ —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥—Ä–µ–¥–∞–≥–æ–≤–∞–Ω–æ.")

            main_menu_buttons = [
                [KeyboardButton("–°–ø–∏—Å–æ–∫ –∑–∞–≤–¥–∞–Ω—å")],
                [KeyboardButton("–ü—Ä–∏–π–Ω—è—Ç–∏ –∑–∞—è–≤–∫—É –≤ –æ–±—Ä–æ–±–∫—É")],
                [KeyboardButton("–ó–∞–∫—Ä–∏—Ç–∏ –∑–∞—è–≤–∫—É")],
                [KeyboardButton("–°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞—è–≤–∫—É")],
                [KeyboardButton("–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å")],
                [KeyboardButton("–î–µ–∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å –≤–æ–ª–æ–Ω—Ç–µ—Ä–∞")],
                [KeyboardButton("–í–∏—Ö—ñ–¥")],
            ]
            reply_markup = ReplyKeyboardMarkup(main_menu_buttons, resize_keyboard=True)
            await update.message.reply_text("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=reply_markup)

        except ValueError as e:
            await update.message.reply_text(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: {str(e)}")
        except Exception as e:
            await update.message.reply_text(f"‚ö†Ô∏è –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: –í–∏–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –≤ —Ä–æ–∑–¥—ñ–ª—ñ '–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å', —â–æ–± –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –∑–∞—è–≤–∫–∏ –ø–æ –≤–∏–±—Ä–∞–Ω–∏–º –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º ")
    else:
        await update.message.reply_text("‚ùå –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")

        main_menu_buttons = [
            [KeyboardButton("–°–ø–∏—Å–æ–∫ –∑–∞–≤–¥–∞–Ω—å")],
            [KeyboardButton("–ü—Ä–∏–π–Ω—è—Ç–∏ –∑–∞—è–≤–∫—É –≤ –æ–±—Ä–æ–±–∫—É")],
            [KeyboardButton("–ó–∞–∫—Ä–∏—Ç–∏ –∑–∞—è–≤–∫—É")],
            [KeyboardButton("–°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞—è–≤–∫—É")],
            [KeyboardButton("–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å")],
            [KeyboardButton("–î–µ–∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å –≤–æ–ª–æ–Ω—Ç–µ—Ä–∞")],
            [KeyboardButton("–í–∏—Ö—ñ–¥")],
        ]
        reply_markup = ReplyKeyboardMarkup(main_menu_buttons, resize_keyboard=True, one_time_keyboard=False)
        await update.message.reply_text("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=reply_markup)

    return ConversationHandler.END

async def cancel_edit(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–∫–∞—Å—É–≤–∞–Ω–Ω—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é —Ç–∞ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –º–µ–Ω—é."""
    main_menu_buttons = [
        [KeyboardButton("–°–ø–∏—Å–æ–∫ –∑–∞–≤–¥–∞–Ω—å")],
        [KeyboardButton("–ü—Ä–∏–π–Ω—è—Ç–∏ –∑–∞—è–≤–∫—É –≤ –æ–±—Ä–æ–±–∫—É")],
        [KeyboardButton("–ó–∞–∫—Ä–∏—Ç–∏ –∑–∞—è–≤–∫—É")],
        [KeyboardButton("–°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞—è–≤–∫—É")],
        [KeyboardButton("–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å")],
        [KeyboardButton("–î–µ–∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å –≤–æ–ª–æ–Ω—Ç–µ—Ä–∞")],
        [KeyboardButton("–í–∏—Ö—ñ–¥")],
    ]
    reply_markup = ReplyKeyboardMarkup(main_menu_buttons, resize_keyboard=True, one_time_keyboard=False)

    await update.message.reply_text("‚ùå –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=reply_markup)
    return ConversationHandler.END



edit_profile_handler = ConversationHandler(
    entry_points=[MessageHandler(filters.Regex("^–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å$"), start_edit_profile)],
    states={
        ENTER_LOCATION: [
            MessageHandler(filters.LOCATION, enter_location),
            MessageHandler(filters.TEXT & ~filters.COMMAND, enter_location),
            MessageHandler(filters.Regex("^–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏$"), skip_location),
        ],
        ENTER_CATEGORIES: [
            CallbackQueryHandler(select_category),
        ],
        CONFIRM_EDIT: [
            MessageHandler(filters.Regex("^‚úÖ –¢–∞–∫$"), confirm_edit),
            MessageHandler(filters.Regex("^‚ùå –ù—ñ$"), cancel_edit),
        ],
    },
    fallbacks=[MessageHandler(filters.Regex("^‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è$"), cancel_edit)],
)
