from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    Application,
    ContextTypes,
    ConversationHandler,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
)
from services.api_client import get_applications_by_status, accept_application, refresh_token_log


CHOOSE_DISTANCE, CHOOSE_APPLICATION, CONFIRM_APPLICATION = range(3)

PAGE_SIZE = 5
DISTANCE_FILTERS = ["–¥–æ 5 –∫–º", "–¥–æ 10 –∫–º", "–¥–æ 20 –∫–º", "–¥–æ 50 –∫–º"]


async def ensure_valid_token(context: ContextTypes.DEFAULT_TYPE) -> str:
    user_data = context.user_data

    refresh_token = user_data.get("refresh_token")
    if not refresh_token:
        await reset_to_start_menu(context)
        raise Exception("Refresh token is missing. User needs to reauthenticate.")

    try:
        tokens = await refresh_token_log(refresh_token)
        user_data["access_token"] = tokens["access_token"]
        user_data["refresh_token"] = tokens.get("refresh_token", refresh_token)
        return user_data["access_token"]
    except Exception as e:

        await reset_to_start_menu(context)
        raise Exception(f"Failed to refresh access token: {e}")


async def reset_to_start_menu(context: ContextTypes.DEFAULT_TYPE):
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ –º–µ–Ω—é.
    """
    if "user_id" in context.user_data:
        del context.user_data["user_id"]
    if "access_token" in context.user_data:
        del context.user_data["access_token"]
    if "refresh_token" in context.user_data:
        del context.user_data["refresh_token"]

    await context.bot.send_message(
        chat_id=context.user_data.get("chat_id"),
        text="‚è≥ –¢–µ—Ä–º—ñ–Ω –¥—ñ—ó –≤–∞—à–æ–≥–æ —Å–µ–∞–Ω—Å—É –∑–∞–∫—ñ–Ω—á–∏–≤—Å—è. –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.",
        reply_markup=START_KEYBOARD
    )
START_KEYBOARD = ReplyKeyboardMarkup(
    [
        [KeyboardButton("–°—Ç–∞—Ç–∏ –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–º")],
        [KeyboardButton("–°—Ç–∞—Ç–∏ –±–µ–Ω–µ—Ñ—ñ—Ü—ñ–∞—Ä–æ–º")],
    ],
    resize_keyboard=True, one_time_keyboard=False
)

async def start_accept_application(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Start the application selection process with distance filter."""

    if not context.user_data.get("access_token"):
        await update.message.reply_text("‚ùå –í–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ. –°–ø–æ—á–∞—Ç–∫—É –≤–∏–∫–æ–Ω–∞–π—Ç–µ –≤—Ö—ñ–¥ –¥–æ —Å–∏—Å—Ç–µ–º–∏.")
        return ConversationHandler.END


    try:
        access_token = await ensure_valid_token(context)
    except Exception as e:
        await update.message.reply_text(f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ —Ç–æ–∫–µ–Ω–∞: {str(e)}")
        return ConversationHandler.END

    try:

        applications = await get_applications_by_status(access_token, status="available")

        if 'detail' in applications and applications['detail'] == 'No applications found.':
            await update.message.reply_text("–ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∑–∞—è–≤–æ–∫.")
            return ConversationHandler.END

        if not applications:
            await update.message.reply_text("–ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∑–∞—è–≤–æ–∫.")
            return ConversationHandler.END


        context.user_data["all_applications"] = applications


        keyboard = [
            [InlineKeyboardButton(distance, callback_data=f"distance_{i}") for i, distance in enumerate(DISTANCE_FILTERS)]
        ]
        keyboard.append([InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel")])
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text("üìç –û–±–µ—Ä—ñ—Ç—å –¥–∏—Å—Ç–∞–Ω—Ü—ñ—é –¥–ª—è –ø–æ—à—É–∫—É –∑–∞—è–≤–æ–∫:", reply_markup=reply_markup)
        return CHOOSE_DISTANCE

    except PermissionError as e:
        await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ—Å—Ç—É–ø—É: {str(e)}")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: {str(e)}")

    return ConversationHandler.END


async def choose_distance(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Handle user's distance selection and filter applications."""
    query = update.callback_query
    await query.answer()

    if not query.data.startswith("distance_"):
        await query.edit_message_text("‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –≤–∏–±—ñ—Ä. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        return ConversationHandler.END

    selected_distance_index = int(query.data.removeprefix("distance_"))
    selected_distance = DISTANCE_FILTERS[selected_distance_index]
    context.user_data["selected_distance"] = selected_distance

    max_distance = int(selected_distance.split(" ")[1])

    all_applications = context.user_data.get("all_applications", [])
    filtered_applications = [
        app for app in all_applications
        if app.get("distance", float('inf')) <= max_distance
    ]

    if not filtered_applications:
        await query.edit_message_text("üì≠ –ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∑–∞—è–≤–æ–∫ —É –≤–∏–±—Ä–∞–Ω—ñ–π –¥–∏—Å—Ç–∞–Ω—Ü—ñ—ó.")
        return ConversationHandler.END


    context.user_data["applications_list"] = filtered_applications
    context.user_data["current_page"] = 0


    await display_application_page(update, context)
    return CHOOSE_APPLICATION


def get_paginated_keyboard(applications_list, page, page_size):
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –¥–ª—è –∑–∞—è–≤–æ–∫ —ñ–∑ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—î—é."""
    sorted_applications = sorted(applications_list, key=lambda app: app['id'])

    start = page * page_size
    end = start + page_size
    current_apps = sorted_applications[start:end]

    keyboard = [
        [InlineKeyboardButton(f"üÜî ID: {app['id']} | üìù {app['description']}", callback_data=f"app_{app['id']}")]
        for app in current_apps
    ]

    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="prev_page"))
    if end < len(sorted_applications):
        nav_buttons.append(InlineKeyboardButton("‚û°Ô∏è –í–ø–µ—Ä–µ–¥", callback_data="next_page"))

    if nav_buttons:
        keyboard.append(nav_buttons)

    keyboard.append([InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel")])

    return InlineKeyboardMarkup(keyboard)

async def display_application_page(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –∑–∞—è–≤–æ–∫."""
    applications_list = context.user_data["applications_list"]
    page = context.user_data["current_page"]

    reply_markup = get_paginated_keyboard(applications_list, page, PAGE_SIZE)

    if update.message:
        await update.message.reply_text("üìã –í–∏–±–µ—Ä—ñ—Ç—å –∑–∞—è–≤–∫—É –∑—ñ —Å–ø–∏—Å–∫—É (—Å–æ—Ä—Ç–æ–≤–∞–Ω–æ –∑–∞ ID):", reply_markup=reply_markup)
    elif update.callback_query:
        await update.callback_query.edit_message_text("üìã –í–∏–±–µ—Ä—ñ—Ç—å –∑–∞—è–≤–∫—É –∑—ñ —Å–ø–∏—Å–∫—É (—Å–æ—Ä—Ç–æ–≤–∞–Ω–æ –∑–∞ ID):", reply_markup=reply_markup)

async def choose_application(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –∑–∞—è–≤–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º."""
    query = update.callback_query
    await query.answer()

    if not query.data.startswith("app_"):
        await query.edit_message_text("‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –≤–∏–±—ñ—Ä. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        return CHOOSE_APPLICATION

    application_id = query.data.removeprefix("app_")
    application = next((app for app in context.user_data["applications_list"] if str(app["id"]) == application_id), None)

    if not application:
        await query.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞: –ó–∞—è–≤–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞.")
        return ConversationHandler.END


    context.user_data["selected_application_id"] = application_id


    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data="confirm"),
            InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel"),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(
        text=(
            f"‚úÖ –í–∏ –≤–∏–±—Ä–∞–ª–∏ –∑–∞—è–≤–∫—É –∑ ID: {application_id}.\n\n"
            f"üìù –û–ø–∏—Å: {application['description']}\n"
            f"‚ùì –í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ –≤–∏–∫–æ–Ω–∞—î—Ç–µ —ó—ó?"
        ),
        reply_markup=reply_markup,
    )
    return CONFIRM_APPLICATION


from datetime import datetime

async def confirm_application(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç—Ç—è –∑–∞—è–≤–∫–∏."""
    query = update.callback_query
    await query.answer()

    application_id = context.user_data.get("selected_application_id")

    try:
        access_token = await ensure_valid_token(context)
    except Exception as e:
        await query.edit_message_text(f"‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ —Ç–æ–∫–µ–Ω–∞: {str(e)}")
        return ConversationHandler.END

    if not application_id:
        await query.edit_message_text("‚ö†Ô∏è –í–∏–±–µ—Ä—ñ—Ç—å –∑–∞—è–≤–∫—É –ø–µ—Ä–µ–¥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è–º.")
        return ConversationHandler.END

    try:
        application_data = await accept_application(access_token, int(application_id))

        local_application_data = next(
            (app for app in context.user_data["applications_list"] if str(app["id"]) == application_id), {})

        creator_name = (
                application_data.get("creator", {}).get("first_name")
                or local_application_data.get("creator", {}).get("first_name", "–Ü–º'—è –Ω–µ –≤–∫–∞–∑–∞–Ω–æ")
        )
        creator_phone = (
                application_data.get("creator", {}).get("phone_num")
                or local_application_data.get("creator", {}).get("phone_num", "–¢–µ–ª–µ—Ñ–æ–Ω –Ω–µ –≤–∫–∞–∑–∞–Ω–æ")
        )

        location = application_data.get("location", {})
        latitude = location.get("latitude", "–ù–µ –≤–∫–∞–∑–∞–Ω–æ")
        longitude = location.get("longitude", "–ù–µ –≤–∫–∞–∑–∞–Ω–æ")
        address = location.get("address_name", "–ê–¥—Ä–µ—Å–∞ –Ω–µ –≤–∫–∞–∑–∞–Ω–∞")

        google_maps_url = f"[üåç —Ç—É—Ç](https://www.google.com/maps?q={latitude},{longitude})" if latitude != "–ù–µ –≤–∫–∞–∑–∞–Ω–æ" and longitude != "–ù–µ –≤–∫–∞–∑–∞–Ω–æ" else "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"

        location_text = (
            f"üìç –õ–æ–∫–∞—Ü—ñ—è: {google_maps_url}\n"
            f"üè† –ê–¥—Ä–µ—Å–∞: {address}\n\n"
            if google_maps_url != "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"
            else "üìç –õ–æ–∫–∞—Ü—ñ—è: –Ω–µ –≤–∫–∞–∑–∞–Ω–∞\nüè† –ê–¥—Ä–µ—Å–∞: –Ω–µ –≤–∫–∞–∑–∞–Ω–∞"
        )

        def format_date(date_str):
            if date_str:
                try:
                    date_obj = datetime.fromisoformat(date_str)
                    return date_obj.strftime("%d.%m.%Y %H:%M")
                except ValueError:
                    return "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏"
            return "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"

        date_at_formatted = format_date(application_data.get("date_at"))
        active_to_formatted = format_date(application_data.get("active_to"))

        confirmation_text = (
            f"‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø—ñ—à–Ω–æ –ø—Ä–∏–π–Ω—è—Ç–∞!\n"
            f"üÜî ID: {application_data['id']}\n"
            f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {application_data['category_id']}\n"
            f"üìù –û–ø–∏—Å: {application_data['description']}\n"
            f"üìÖ –î–∞—Ç–∞ –ø–æ–¥–∞—á—ñ: {date_at_formatted}\n"
            f"‚è≥ –ê–∫—Ç–∏–≤–Ω–∞ –¥–æ: {active_to_formatted}\n"
            f"üîÑ –°—Ç–∞—Ç—É—Å: –í–∏–∫–æ–Ω—É—î—Ç—å—Å—è\n\n"
            f"üë§ –Ü–º'—è –∑–∞–º–æ–≤–Ω–∏–∫–∞: {creator_name}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω –∑–∞–º–æ–≤–Ω–∏–∫–∞: {creator_phone}\n\n"
            f"{location_text}"
        )

        await query.edit_message_text(confirmation_text, parse_mode="Markdown", disable_web_page_preview=True)
    except Exception as e:
        await query.edit_message_text(f"‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: {str(e)}", parse_mode="Markdown")

    return ConversationHandler.END



async def navigate_pages(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–æ–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥—É –º—ñ–∂ —Å—Ç–æ—Ä—ñ–Ω–∫–∞–º–∏."""
    query = update.callback_query
    await query.answer()


    current_page = context.user_data.get("current_page", 0)
    applications = context.user_data.get("applications_list", [])

    if query.data == "prev_page":
        context.user_data["current_page"] = max(0, current_page - 1)
    elif query.data == "next_page":
        total_pages = (len(applications) + PAGE_SIZE - 1) // PAGE_SIZE
        context.user_data["current_page"] = min(total_pages - 1, current_page + 1)


    await display_application_page(update, context)
    return CHOOSE_APPLICATION


async def cancel_accept_application(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–∫–∞—Å—É–≤–∞–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç—Ç—è –∑–∞—è–≤–∫–∏."""
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("‚ùå –ü—Ä–∏–π–Ω—è—Ç—Ç—è –∑–∞—è–≤–∫–∏ —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
    return ConversationHandler.END


accept_application_handler = ConversationHandler(
    entry_points=[MessageHandler(filters.Regex("^–ü—Ä–∏–π–Ω—è—Ç–∏ –∑–∞—è–≤–∫—É –≤ –æ–±—Ä–æ–±–∫—É"), start_accept_application)],
    states={
        CHOOSE_DISTANCE: [
            CallbackQueryHandler(choose_distance, pattern="^distance_\\d+$"),
            CallbackQueryHandler(cancel_accept_application, pattern="^cancel$"),
        ],
        CHOOSE_APPLICATION: [
            CallbackQueryHandler(choose_application, pattern="^app_\\d+$"),
            CallbackQueryHandler(navigate_pages, pattern="^(prev_page|next_page)$"),
            CallbackQueryHandler(cancel_accept_application, pattern="^cancel$"),
        ],
        CONFIRM_APPLICATION: [
            CallbackQueryHandler(confirm_application, pattern="^confirm$"),
            CallbackQueryHandler(cancel_accept_application, pattern="^cancel$"),
        ],
    },
    fallbacks=[CommandHandler("cancel", cancel_accept_application)],
)

