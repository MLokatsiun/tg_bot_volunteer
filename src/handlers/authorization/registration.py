import re

from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton, \
    ReplyKeyboardRemove
from telegram.ext import ContextTypes, ConversationHandler, CommandHandler, MessageHandler, CallbackQueryHandler, \
    filters
from urllib3 import request

from handlers.beneficiary.create_application import reverse_geocode
from services.api_client import register_user, login_user

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏ –¥–ª—è —Å—Ç–∞–Ω—ñ–≤
AWAIT_CONFIRMATION, ENTER_PHONE, ENTER_FIRSTNAME, ENTER_LASTNAME, ENTER_PATRONYMIC, CHOOSE_DEVICE, ENTER_LOCATION, CONFIRM_DATA,  = range(8)

from decouple import config

CLIENT_NAME = config("CLIENT_NAME")
CLIENT_PASSWORD = config("CLIENT_PASSWORD")


async def start_volunteer_registration(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —É–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π, –ø–µ—Ä–µ–¥ –ø–æ—á–∞—Ç–∫–æ–º –ø—Ä–æ—Ü–µ—Å—É —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –¥–ª—è –≤–æ–ª–æ–Ω—Ç–µ—Ä–∞."""
    context.user_data["role_id"] = 2
    return await check_and_start_registration(update, context)

async def start_beneficiary_registration(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —É–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π, –ø–µ—Ä–µ–¥ –ø–æ—á–∞—Ç–∫–æ–º –ø—Ä–æ—Ü–µ—Å—É —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –¥–ª—è –±–µ–Ω–µ—Ñ—ñ—Ü—ñ–∞—Ä–∞."""
    context.user_data["role_id"] = 1
    return await check_and_start_registration(update, context)

async def check_and_start_registration(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    tg_id = update.effective_user.id
    role_id = context.user_data.get("role_id")


    if update.message.text and "–°–∫–∞—Å—É–≤–∞—Ç–∏" in update.message.text:
        return await cancel(update, context)

    login_request = {
        "tg_id": str(tg_id),
        "role_id": role_id,
        "client": CLIENT_NAME,
        "password": CLIENT_PASSWORD,
    }

    try:
        response = await login_user(login_request)

        access_token = response.get("access_token")
        refresh_token = response.get("refresh_token")

        if access_token and refresh_token:
            context.user_data["access_token"] = access_token
            context.user_data["refresh_token"] = refresh_token


            await update.message.reply_text(
                "–í–∏ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ! –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é."
            )
            await main_menu(update, context)
            return ConversationHandler.END

    except ValueError as ve:
        await update.message.reply_text(f"–ü–æ–º–∏–ª–∫–∞: {ve}")
    except PermissionError:

        keyboard = [[KeyboardButton("–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –≤–æ–ª–æ–Ω—Ç–µ—Ä–∞")], [KeyboardButton("–°–∫–∞—Å—É–≤–∞—Ç–∏")]] \
            if role_id == 2 else [[KeyboardButton("–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –±–µ–Ω–µ—Ñ—ñ—Ü—ñ–∞—Ä–∞")], [KeyboardButton("–°–∫–∞—Å—É–≤–∞—Ç–∏")]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
        await update.message.reply_text(
            "–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∞–±–æ –¥–æ—á–µ–∫–∞–π—Ç–µ—Å—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞.",
            reply_markup=reply_markup
        )
        return AWAIT_CONFIRMATION
    except Exception as e:
        print(f"Error checking registration: {str(e)}")
        await update.message.reply_text(
            "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏."
        )


    return await start_registration(update, context)

async def start_registration(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ—á–∞—Ç–æ–∫ –ø—Ä–æ—Ü–µ—Å—É —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó."""
    keyboard = [
        [KeyboardButton("–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É", request_contact=True)],
        [KeyboardButton("–°–∫–∞—Å—É–≤–∞—Ç–∏")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    await update.message.reply_text(
        "–î–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó, –±—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Å–≤—ñ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂—á–µ:",
        reply_markup=reply_markup
    )
    return ENTER_PHONE


async def enter_phone(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É –∞–±–æ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è."""
    if update.message.text == "–°–∫–∞—Å—É–≤–∞—Ç–∏":
        return await cancel(update, context)

    if update.message.contact:
        phone = update.message.contact.phone_number


        if phone.startswith('+'):
            phone = phone[1:]
        elif phone.startswith('8'):
            phone = '380' + phone[1:]
        elif not phone.startswith('380'):
            await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è –∫–æ—Ä–µ–∫—Ç–Ω–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É.")
            return ENTER_PHONE

        context.user_data["phone_num"] = phone


        keyboard = [[KeyboardButton("–°–∫–∞—Å—É–≤–∞—Ç–∏")]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)

        await update.message.reply_text(
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Å–≤–æ—î –ø–æ–≤–Ω–µ —ñ–º'—è –≤ –æ–¥–Ω–æ–º—É —Ä—è–¥–∫—É, —Ä–æ–∑–¥—ñ–ª—è—é—á–∏ —á–∞—Å—Ç–∏–Ω–∏ –ø—Ä–æ–±—ñ–ª–∞–º–∏.\n\n"
            "üîπ –ù–∞–ø—Ä–∏–∫–ª–∞–¥:\n"
            "- –Ü–≤–∞–Ω –ü–µ—Ç—Ä–µ–Ω–∫–æ –Ü–≤–∞–Ω–æ–≤–∏—á (—ñ–º'—è, –ø—Ä—ñ–∑–≤–∏—â–µ, –ø–æ –±–∞—Ç—å–∫–æ–≤—ñ)\n"
            "- –Ü–≤–∞–Ω –ü–µ—Ç—Ä–µ–Ω–∫–æ (—Ç—ñ–ª—å–∫–∏ —ñ–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ)\n"
            "- –Ü–≤–∞–Ω (–ª–∏—à–µ —ñ–º'—è)\n\n"
            "–Ø–∫—â–æ –≤–∏ –≤–≤–µ–¥–µ—Ç–µ —Ç—ñ–ª—å–∫–∏ —ñ–º'—è, –±—É–¥–µ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –ª–∏—à–µ –π–æ–≥–æ.",
            reply_markup=reply_markup
        )

        return ENTER_FIRSTNAME
    else:
        await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ—é –¥–ª—è –ø–µ—Ä–µ–¥–∞—á—ñ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É.")
        return ENTER_PHONE




MAX_NAME_LENGTH = 50
MIN_NAME_LENGTH = 2

async def enter_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è —ñ–º–µ–Ω—ñ, –ø—Ä—ñ–∑–≤–∏—â–∞ —ñ –ø–æ-–±–∞—Ç—å–∫–æ–≤—ñ –æ–¥–Ω–∏–º —Ä—è–¥–∫–æ–º."""
    if update.message.text == "–°–∫–∞—Å—É–≤–∞—Ç–∏":
        return await cancel(update, context)

    name_parts = update.message.text.strip().split()


    valid_name_regex = r"^[A-Za-z–ê-–Ø–∞-—è–Å—ë]+$"


    if not all(re.match(valid_name_regex, part) for part in name_parts):
        await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –ª–∏—à–µ –ª—ñ—Ç–µ—Ä–∏ (–ª–∞—Ç–∏–Ω–∏—Ü—è, –∫–∏—Ä–∏–ª–∏—Ü—è, —Ä–æ—Å—ñ–π—Å—å–∫–∞).")
        return ENTER_FIRSTNAME

    if len(name_parts) == 1:
        context.user_data["firstname"] = name_parts[0]
        context.user_data["lastname"] = ""
        context.user_data["patronymic"] = ""
    elif len(name_parts) == 2:
        context.user_data["lastname"] = name_parts[0]
        context.user_data["firstname"] = name_parts[1]
        context.user_data["patronymic"] = ""
    elif len(name_parts) >= 3:
        context.user_data["lastname"] = name_parts[0]
        context.user_data["firstname"] = name_parts[1]
        context.user_data["patronymic"] = " ".join(name_parts[2:])

    if context.user_data.get("role_id") == 2:
        return await choose_device(update, context)
    else:
        return await confirm_registration(update, context)

async def choose_device(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–ø–∏—Ç—É—î, —á–∏ –ø—Ä–∞—Ü—é—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ —Ç–µ–ª–µ—Ñ–æ–Ω—É —á–∏ –ü–ö."""
    keyboard = [
        [KeyboardButton("–Ø –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ")],
        [KeyboardButton("–Ø –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é –ü–ö")],
        [KeyboardButton("–°–∫–∞—Å—É–≤–∞—Ç–∏")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    await update.message.reply_text(
        "–í–∫–∞–∂—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, —á–∏ –ø—Ä–∞—Ü—é—î—Ç–µ –≤–∏ –∑ —Ç–µ–ª–µ—Ñ–æ–Ω—É —á–∏ –ü–ö:",
        reply_markup=reply_markup
    )
    return ENTER_LOCATION

async def enter_coordinates(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∞–±–æ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–¥—Ä–µ—Å–∏ —á–µ—Ä–µ–∑ –∑–≤–æ—Ä–æ—Ç–Ω–µ –≥–µ–æ–∫–æ–¥—É–≤–∞–Ω–Ω—è."""
    if update.message.text:
        user_response = update.message.text.strip().lower()

        if user_response == "—Å–∫–∞—Å—É–≤–∞—Ç–∏":
            return await cancel(update, context)

        if user_response == "—è –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ":
            keyboard = [
                [KeyboardButton("–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –ª–æ–∫–∞—Ü—ñ—î—é", request_location=True)],
                [KeyboardButton("–°–∫–∞—Å—É–≤–∞—Ç–∏")]
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
            await update.message.reply_text(
                "–ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è –≤–∞—à–æ—é –ª–æ–∫–∞—Ü—ñ—î—é –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂—á–µ:",
                reply_markup=reply_markup
            )
            return ENTER_LOCATION

        elif user_response == "—è –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é –ø–∫":
            await update.message.reply_text(
                "–í–∏ –º–æ–∂–µ—Ç–µ –∑–Ω–∞–π—Ç–∏ –≤–∞—à—É –∞–¥—Ä–µ—Å—É —á–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é Google Maps. –ü–µ—Ä–µ–π–¥—ñ—Ç—å –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º:\n"
                "[Google Maps](https://www.google.com/maps)\n\n"
                "–°–∫–æ–ø—ñ—é–π—Ç–µ –∞–¥—Ä–µ—Å—É —á–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ —Ç–∞ –≤—Å—Ç–∞–≤—Ç–µ —ó—Ö —É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ.",
                parse_mode="Markdown"
            )
            return ENTER_LOCATION


        coordinates_match = re.match(r"^(-?\d+(\.\d+)?),\s*(-?\d+(\.\d+)?)$", user_response)
        if coordinates_match:
            latitude = float(coordinates_match.group(1))
            longitude = float(coordinates_match.group(3))
            context.user_data["location"] = {
                "latitude": latitude,
                "longitude": longitude
            }


            address = await reverse_geocode(latitude, longitude)
            context.user_data["location"]["address"] = address

            await update.message.reply_text(
                f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –æ—Ç—Ä–∏–º–∞–Ω–æ. –í–∏–∑–Ω–∞—á–µ–Ω–∞ –∞–¥—Ä–µ—Å–∞: {address}.\n"
                "–ë—É–¥—å –ª–∞—Å–∫–∞, –ø—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –≤–∞—à—ñ –¥–∞–Ω—ñ."
            )
            await confirm_registration(update, context)
            return CONFIRM_DATA


        else:
            context.user_data["location"] = {"address": user_response}
            await update.message.reply_text(
                "–ê–¥—Ä–µ—Å—É –æ—Ç—Ä–∏–º–∞–Ω–æ. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –≤–∞—à—ñ –¥–∞–Ω—ñ."
            )
            await confirm_registration(update, context)
            return CONFIRM_DATA

    elif update.message.location:
        latitude = update.message.location.latitude
        longitude = update.message.location.longitude
        context.user_data["location"] = {
            "latitude": latitude,
            "longitude": longitude
        }


        address = await reverse_geocode(latitude, longitude)
        context.user_data["location"]["address"] = address

        await update.message.reply_text(
            f"–õ–æ–∫–∞—Ü—ñ—é –æ—Ç—Ä–∏–º–∞–Ω–æ. –í–∏–∑–Ω–∞—á–µ–Ω–∞ –∞–¥—Ä–µ—Å–∞: {address}.\n"
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –ø—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –≤–∞—à—ñ –¥–∞–Ω—ñ."
        )
        await confirm_registration(update, context)
        return CONFIRM_DATA

    else:
        await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –≤–∞—à—É –ª–æ–∫–∞—Ü—ñ—é, –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –∞–±–æ –∞–¥—Ä–µ—Å—É.")
        return ENTER_LOCATION


async def confirm_registration(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑—É—î –¥–∞–Ω—ñ –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –ø–µ—Ä–µ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è–º —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó."""
    user_data = context.user_data
    phone = user_data.get("phone_num", "–ù–µ –≤–∫–∞–∑–∞–Ω–æ")
    firstname = user_data.get("firstname", "–ù–µ –≤–∫–∞–∑–∞–Ω–æ")
    lastname = user_data.get("lastname", "–ù–µ –≤–∫–∞–∑–∞–Ω–æ")
    patronymic = user_data.get("patronymic", "–ù–µ –≤–∫–∞–∑–∞–Ω–æ")
    role = "–í–æ–ª–æ–Ω—Ç–µ—Ä" if user_data.get("role_id") == 2 else "–ë–µ–Ω–µ—Ñ—ñ—Ü—ñ–∞—Ä"

    # –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –ª–æ–∫–∞—Ü—ñ—ó
    location = user_data.get("location", {})
    if "latitude" in location and "longitude" in location:
        location_display = f"–®–∏—Ä–æ—Ç–∞: {location['latitude']}, –î–æ–≤–≥–æ—Ç–∞: {location['longitude']}"
    elif "address" in location:
        location_display = f"–ê–¥—Ä–µ—Å–∞: {location['address']}"
    else:
        location_display = "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"


    confirmation_message = (
        f"–í–∞—à—ñ –¥–∞–Ω—ñ –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è:\n\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
        f"–Ü–º'—è: {firstname}\n"
        f"–ü—Ä—ñ–∑–≤–∏—â–µ: {lastname}\n"
        f"–ü–æ-–±–∞—Ç—å–∫–æ–≤—ñ: {patronymic}\n"
        f"–†–æ–ª—å: {role}\n"
        f"{'–õ–æ–∫–∞—Ü—ñ—è: ' + location_display if role == '–í–æ–ª–æ–Ω—Ç–µ—Ä' else ''}\n\n"
        "–Ø–∫—â–æ –≤—Å–µ –≤—ñ—Ä–Ω–æ, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏'. –Ø–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–ø—Ä–∞–≤–∏—Ç–∏, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–°–∫–∞—Å—É–≤–∞—Ç–∏'."
    )


    keyboard = [
        [KeyboardButton("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏")],
        [KeyboardButton("–°–∫–∞—Å—É–≤–∞—Ç–∏")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)


    await update.message.reply_text(confirmation_message, reply_markup=reply_markup)
    return CONFIRM_DATA


async def send_to_api(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –¥–æ API –ø—ñ—Å–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Ç–∞ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –º–µ–Ω—é."""
    user_data = context.user_data
    user_id = update.message.from_user.id

    try:

        await register_user(user_id, user_data)
        role_id = user_data.get("role_id")


        if role_id == 2:
            keyboard = [
                [KeyboardButton("–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –≤–æ–ª–æ–Ω—Ç–µ—Ä–∞")],
                [KeyboardButton("–°–∫–∞—Å—É–≤–∞—Ç–∏")]
            ]
        else:
            keyboard = [
                [KeyboardButton("–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –±–µ–Ω–µ—Ñ—ñ—Ü—ñ–∞—Ä–∞")],
                [KeyboardButton("–°–∫–∞—Å—É–≤–∞—Ç–∏")]
            ]


        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)

        await update.message.reply_text(
            "–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞! –í–∏ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –∞–±–æ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –º–µ–Ω—é.",
            reply_markup=reply_markup
        )

        return AWAIT_CONFIRMATION
    except PermissionError:

        keyboard = [
            [KeyboardButton("–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –≤–æ–ª–æ–Ω—Ç–µ—Ä–∞")],
            [KeyboardButton("–°–∫–∞—Å—É–≤–∞—Ç–∏")]
        ] if user_data.get("role_id") == 2 else [
            [KeyboardButton("–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –±–µ–Ω–µ—Ñ—ñ—Ü—ñ–∞—Ä–∞")],
            [KeyboardButton("–°–∫–∞—Å—É–≤–∞—Ç–∏")]
        ]

        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
        await update.message.reply_text(
            "–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∞–±–æ –¥–æ—á–µ–∫–∞–π—Ç–µ—Å—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞.",
            reply_markup=reply_markup
        )

        return AWAIT_CONFIRMATION
    except Exception as e:
        await update.message.reply_text(
            f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó: {str(e)}. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."
        )
        return CONFIRM_DATA




async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–∫–∞—Å—É–≤–∞–Ω–Ω—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó —Ç–∞ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é."""


    if "–°–∫–∞—Å—É–≤–∞—Ç–∏" in update.message.text:

        await update.message.reply_text(
            "–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.",
            reply_markup=ReplyKeyboardRemove()
        )


        keyboard = [[KeyboardButton("–°—Ç–∞—Ç–∏ –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–º"), KeyboardButton("–°—Ç–∞—Ç–∏ –±–µ–Ω–µ—Ñ—ñ—Ü—ñ–∞—Ä–æ–º")]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)

        await update.message.reply_text(
            "–í–∏–±–µ—Ä—ñ—Ç—å –æ–¥–Ω—É –∑ –æ–ø—Ü—ñ–π:",
            reply_markup=reply_markup
        )

        return ConversationHandler.END
    else:

        await update.message.reply_text(
            "–©–æ–± —Å–∫–∞—Å—É–≤–∞—Ç–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é, –Ω–∞–ø–∏—à—ñ—Ç—å –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–°–∫–∞—Å—É–≤–∞—Ç–∏'."
        )
        return AWAIT_CONFIRMATION


async def main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø—ñ—Å–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó."""
    role_id = context.user_data.get("role_id")

    if role_id == 2:
        keyboard = [
            [KeyboardButton("–°–ø–∏—Å–æ–∫ –∑–∞–≤–¥–∞–Ω—å")],
            [KeyboardButton("–ü—Ä–∏–π–Ω—è—Ç–∏ –∑–∞—è–≤–∫—É –≤ –æ–±—Ä–æ–±–∫—É")],
            [KeyboardButton("–ó–∞–∫—Ä–∏—Ç–∏ –∑–∞—è–≤–∫—É")],
            [KeyboardButton("–°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞—è–≤–∫—É")],
            [KeyboardButton("–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å")],
            [KeyboardButton("–î–µ–∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å –≤–æ–ª–æ–Ω—Ç–µ—Ä–∞")],
            [KeyboardButton("–í–∏—Ö—ñ–¥")]
        ]
    else:
        keyboard = [
            [KeyboardButton("–ü–æ–¥–∞—Ç–∏ –∑–∞—è–≤–∫—É")],
            [KeyboardButton("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∑–∞—è–≤–∫—É")],
            [KeyboardButton("–î–µ–∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –∑–∞—è–≤–∫—É")],
            [KeyboardButton("–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –º–æ—ó –∑–∞—è–≤–∫–∏")],
            [KeyboardButton("–î–µ–∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å –±–µ–Ω–µ—Ñ—ñ—Ü—ñ–∞—Ä–∞")],
            [KeyboardButton("–í–∏—Ö—ñ–¥")]
        ]

    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)
    await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é –Ω–∏–∂—á–µ:", reply_markup=reply_markup)

registration_handler = ConversationHandler(
    entry_points=[
        MessageHandler(filters.Regex("^–°—Ç–∞—Ç–∏ –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–º$"), start_volunteer_registration),
        MessageHandler(filters.Regex("^–°—Ç–∞—Ç–∏ –±–µ–Ω–µ—Ñ—ñ—Ü—ñ–∞—Ä–æ–º$"), start_beneficiary_registration),
    ],
    states={
        AWAIT_CONFIRMATION: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, check_and_start_registration),
        ],
        ENTER_PHONE: [
            MessageHandler(filters.CONTACT | filters.TEXT & ~filters.COMMAND, enter_phone),
        ],
        ENTER_FIRSTNAME: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, enter_name),
        ],
        CHOOSE_DEVICE: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, choose_device),
        ],
        ENTER_LOCATION: [
            MessageHandler(filters.LOCATION | filters.TEXT & ~filters.COMMAND, enter_coordinates),
        ],
        CONFIRM_DATA: [
            MessageHandler(filters.Regex("^–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏$"), send_to_api),
            MessageHandler(filters.Regex("^–°–∫–∞—Å—É–≤–∞—Ç–∏$"), cancel),
        ],
    },
    fallbacks=[
        CommandHandler("cancel", cancel),
        MessageHandler(filters.Regex("^–°–∫–∞—Å—É–≤–∞—Ç–∏$"), cancel),
    ],
)